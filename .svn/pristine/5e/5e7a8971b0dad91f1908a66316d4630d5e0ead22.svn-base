package org.com.drag.web.controller;

import net.sf.json.JSONArray;
import org.com.drag.common.result.ResponseResult;
import org.com.drag.common.util.Constants;
import org.com.drag.common.util.StringUtils;
import org.com.drag.model.*;
import org.com.drag.service.DataMiningCategoryService;
import org.com.drag.service.DataMiningService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpSession;
import java.util.*;

@Controller
@RequestMapping("/drag/dataMiningCategory")
public class DataMiningCategoryController {

    @Autowired
    private DataMiningCategoryService dataMiningCategoryService;

    @Autowired
    private DataMiningService dataMiningService;

    /**
     * 文件夹 重命名
     * @param dataMiningCategory
     * @return
     */
    @RequestMapping(value = "updateCategoryName",method = RequestMethod.GET)
    @ResponseBody
    public ResponseResult updateMiningCategoryName(DataMiningCategory dataMiningCategory){
        DataMiningCategory dataMiningCategoryTest = new DataMiningCategory();
        dataMiningCategoryTest.setDataMiningCategoryId(dataMiningCategory.getDataMiningCategoryId());
        List<DataMiningCategory> dataMiningCategoryList = dataMiningCategoryService.selectDataMiningCategory(dataMiningCategoryTest);
        int sum = dataMiningCategoryService.selectSum(null,dataMiningCategory.getDataMiningCategoryName(),dataMiningCategoryList.get(0).getDataMiningCategoryPid(),1);
        if(sum != 0){
            return new ResponseResult(  HttpStatus.EXPECTATION_FAILED,"文件名已存在,重命名失败");
        }else {
            int rowCount = dataMiningCategoryService.updateCategory(dataMiningCategory);
            if (rowCount > 0 ){
                return new ResponseResult(HttpStatus.OK,"重命名成功",rowCount);
            }
            return new ResponseResult(HttpStatus.EXPECTATION_FAILED,"重命名失败");
        }
    }

    /**
     * 删除文件
     * @param id
     * @return
     */
    @RequestMapping(value = "deleteCategory",method = RequestMethod.GET)
    @ResponseBody
    public ResponseResult deleteMiningCategoryName(String id){
        int rowCount = dataMiningCategoryService.deleteCategory(Integer.valueOf(id));
        if (rowCount > 0){
            return new ResponseResult(HttpStatus.OK,"删除文件成功",rowCount);
        }
        return new ResponseResult(HttpStatus.EXPECTATION_FAILED,"删除文件失败");
    }

    /**
     * 新建挖掘分析项
     * @param dataMining
     * @return
     */
    @RequestMapping(value = "insertMiningAndCategory",method = RequestMethod.GET)
    @ResponseBody
    public ResponseResult insertMiningAndCategory(DataMining dataMining){
        if (StringUtils.isNotBlank(dataMining.getDataMiningName())){
            int rowCount = dataMiningCategoryService.insertMining(dataMining);
            if (rowCount > 0){
                return new ResponseResult(HttpStatus.OK,"新建数据分析项成功！",rowCount);
            }
            return new ResponseResult(HttpStatus.EXPECTATION_FAILED,"新建数据分析项失败！");
        }
        return new ResponseResult(HttpStatus.NOT_FOUND,"数据挖掘名不能空！");
    }

    /**
     * 新建文件夹
     * @param dataMiningCategory
     * @return
     */
    @RequestMapping(value = "insertCategoryFolder",method = RequestMethod.GET)
    @ResponseBody
    public ResponseResult insertMiningCategoryFolder(HttpSession session,DataMiningCategory dataMiningCategory){
        dataMiningCategory.setUserid(1);
        if (StringUtils.isNotBlank(dataMiningCategory.getDataMiningCategoryName())){
            int sum = dataMiningCategoryService.selectSum(null,dataMiningCategory.getDataMiningCategoryName(),dataMiningCategory.getDataMiningCategoryPid(),dataMiningCategory.getUserid());
            if(sum != 0){
                return new ResponseResult(HttpStatus.EXPECTATION_FAILED,"文件名已存在，新建文件夹失败");
            }else {
                int rowCount = dataMiningCategoryService.insertMiningCategory(dataMiningCategory);
                if (rowCount > 0){
                    return new ResponseResult(HttpStatus.OK,"新建文件夹成功",rowCount);
                }
                return new ResponseResult(HttpStatus.EXPECTATION_FAILED,"新建文件夹失败");
            }
        }
        return new ResponseResult(HttpStatus.EXPECTATION_FAILED,"新建文件夹失败");
    }

    /**
     * 查询分类目录
     * @param session
     * @param id
     * @param isParent
     * @param name
     * @param pId
     * @return
     */
    @RequestMapping("selectAllDataMiningCategory")
    @ResponseBody
    public ResponseResult selectZtree(HttpSession session, String id, boolean isParent, String name, String pId) {

        User user = (User) session.getAttribute(Constants.USER_KEY);

        DataMiningCategory dataMiningCategory = new DataMiningCategory();
        dataMiningCategory.setDataMiningCategoryPid(Integer.valueOf(id));
        dataMiningCategory.setUserid(user.getId());
        List<DataMiningCategory> dataMiningCategoryList = dataMiningCategoryService.selectDataMiningCategory(dataMiningCategory);
        DataMining dataMining = new DataMining();
        dataMining.setDataMiningCategoryId(Integer.valueOf(id));
        List<DataMining> dataMiningList = dataMiningService.selectDataMining(dataMining);
        List<Node> nodes=new ArrayList<Node>();

        for (DataMiningCategory dataMiningCategory1 : dataMiningCategoryList) {
            Node node = new Node();
            node.setId(Long.valueOf(dataMiningCategory1.getDataMiningCategoryId()));
            node.setpId(Long.valueOf(dataMiningCategory1.getDataMiningCategoryPid()));
            node.setName(dataMiningCategory1.getDataMiningCategoryName());
            node.setIsParent(true);
            nodes.add(node);

        }

        for (DataMining dataMining1 : dataMiningList) {
            Node node = new Node();
            node.setId(Long.valueOf(dataMining1.getDataMiningId()));
            node.setpId(Long.valueOf(dataMining1.getDataMiningCategoryId()));
            node.setName(dataMining1.getDataMiningName());
            node.setIsParent(false);
            nodes.add(node);
        }

        return new ResponseResult(HttpStatus.OK,"查询成功",nodes);
    }

    /**
     * 先查询出父节点相关集合，在遍历出子节点id集合
     * @param list
     * @param parent_id
     * @param returnList
     * @return
     */
    public static Set<Integer> getChildNodes(List<DataMiningCategory> list, Integer parent_id, Set returnList) {
        if(list == null && parent_id == null) return null;
        for (Iterator<DataMiningCategory> iterator = list.iterator(); iterator.hasNext();) {
            DataMiningCategory node = (DataMiningCategory) iterator.next();
            // 一、根据传入的某个父节点ID,遍历该父节点的所有子节点
            if (parent_id.equals(node.getDataMiningCategoryPid())) {
                returnList.add(node.getDataMiningCategoryId());
                //递归遍历子后子
                getChildNodes(list, node.getDataMiningCategoryId(), returnList);
            }
        }
        return returnList;
    }

    /**
     * 首页 数据挖掘目录信息展示
     * @return
     */
    @RequestMapping("dynamicBall")
    @ResponseBody
    public ResponseResult getDynamicBall(Map<String, Object> map){
        List<Map<String, Object>> mapMAndCAndWs = dataMiningCategoryService.getDataMiningCategoryBall();
        List<DataMiningCategory> dataMiningCategoryList = dataMiningCategoryService.selectAll(new DataMiningCategory());
        List<Map<String, Object>> data = new ArrayList<>();
        int count = 1;
        for (Map<String ,Object> mapItem : mapMAndCAndWs){
            Map<String, Object> innerMap = new HashMap<>();
            innerMap.put("id",mapItem.get("dmId"));
            if ((Integer)mapItem.get("dmCategoryId") != 0){
                innerMap.put("pid",mapItem.get("dmCategoryId"));
            }

            innerMap.put("name",mapItem.get("dmName")+"；对应工作流："+mapItem.get("wfName"));
            if ((Integer)mapItem.get("dmcPid") != 0){
                count = this.getDeepCount((Integer) mapItem.get("dmcPid"),count);
                innerMap.put("level",count+2);
                if (count+2 == 2){
                    innerMap.put("size",0.8);
                }else if (count+2 == 3){
                    innerMap.put("size",0.6);
                }else {
                    innerMap.put("size",0.5);
                }
            }else {
                innerMap.put("level",count);
                innerMap.put("size",1);
            }
            count = 1;
           data.add(innerMap);
        }
        for (DataMiningCategory dataMiningCategory : dataMiningCategoryList){
            Map<String, Object> innerMap = new HashMap<>();
            innerMap.put("id",dataMiningCategory.getDataMiningCategoryId());
            if (dataMiningCategory.getDataMiningCategoryPid() != 0){
                innerMap.put("pid",dataMiningCategory.getDataMiningCategoryPid());
            }
            innerMap.put("name",dataMiningCategory.getDataMiningCategoryName());

            if (dataMiningCategory.getDataMiningCategoryPid() != 0){
                count = this.getDeepCount(dataMiningCategory.getDataMiningCategoryPid(),count);
                innerMap.put("level",count+1);
                if (count+1 == 2){
                    innerMap.put("size",0.8);
                }else if (count+1 == 3){
                    innerMap.put("size",0.6);
                }else {
                    innerMap.put("size",0.5);
                }
            }else {
                innerMap.put("level",count);
                innerMap.put("size",1);
            }
            count = 1;
            data.add(innerMap);
        }
        //JSONArray jsonArray = JSONArray.fromObject(data);
        //System.out.println(jsonArray.toString());

       return new ResponseResult(HttpStatus.OK,"数据挖掘目录信息查询成功",data);
    }

    /**
     * 递归次数
     * @return
     */
    public int getDeepCount(Integer id,int count){
        DataMiningCategory dataMiningCategory = dataMiningCategoryService.getPid(id);
        if (dataMiningCategory != null){
            if (dataMiningCategory.getDataMiningCategoryPid() != 0){
                count++;
                this.getDeepCount(dataMiningCategory.getDataMiningCategoryPid(),count);
            }
        }
        return count;
    }
}
