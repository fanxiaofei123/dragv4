package org.com.drag.web.controller;

import org.com.drag.common.page.PageBean;
import org.com.drag.common.result.ResponseResult;
import org.com.drag.common.util.Constants;
import org.com.drag.model.*;
import org.com.drag.service.TemplateCategoryService;
import org.com.drag.service.TemplateService;
import org.com.drag.service.WorkFlowService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by Guzhendong on 2017/10/19 0019.
 */
@Controller
@RequestMapping("/template")
public class TemplateController {
    /**
     * 每页显示数据条数
     */
    private static final Integer PAGE_NUMBER = 6;
    /**
     * 模板库前台页面每页显示条数
     */
    private static final Integer PAGE_NUMBER_VIM = 12;
    @Autowired
    private TemplateService templateService;
    @Autowired
    private TemplateCategoryService templateCategoryService;
    @Autowired
    private WorkFlowService workFolwService;
    /**
     * 模板案列列表
     * @param page
     * @param rowCount
     * @param template
     * @param templateName 案例名
     * @param session
     * @param templateCategoryName 分类名
     * @return
     */
    @ResponseBody
    @RequestMapping("selectAllByAnyThing")
    public PageBean selectAllTipAnyThing(Integer page, Integer rowCount, Template template,
                                         String templateName,String templateCategoryName, HttpSession session) {
        if (page == null || page == 0) {
            page = 1;
        }
        if (rowCount == null) {
            rowCount = PAGE_NUMBER;
        }

        User user = (User) session.getAttribute(Constants.USER_KEY);
        template.setUserid(user.getId());
        template.setTemplateName(templateName);
        if("模板分类".equals(templateCategoryName)){
            template.setTemplateCategoryName(null);
        }else if(!"".equals(templateCategoryName)){
            template.setTemplateCategoryName(templateCategoryName);
        }
        List<Template> list = templateService.selectAllByUserId(template);
        if(null != template.getTcid()){
            //将文件下所有的模板都查询出来
            List<TemplateCategory> menuList = templateCategoryService.selectAll(new TemplateCategory());
            List<Integer> ids =  getChildNodes(menuList,template.getTcid(),new LinkedList());
            for(Integer id : ids ){
                Template template1 = new Template();
                template1.setTcid(id);
                template1.setUserid(user.getId());
                List<Template> templateList = templateService.selectAllByUserId(template1);
                if(templateList != null){
                    for (int i = 0; i <templateList.size() ; i++) {
                        list.add(templateList.get(i));
                    }
                }
            }
        }

        for (Template config : list) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            config.setTemplateUpdateTimes(dateFormat.format(config.getTemplateUpdateTime()));
        }


        List fileList = new ArrayList<>();
        int startItem = (page - 1) * rowCount;
        int endItem = page * rowCount - 1;
        int totalPage = 0;
        if (rowCount > list.size()) {
            totalPage = 1;
        } else {
            totalPage = list.size() % rowCount == 0 ? list.size() / rowCount : list.size() / rowCount + 1;
        }
        if (endItem > list.size() - 1) {
            endItem = list.size() - 1;
        }
        PageBean pageBean = new PageBean();

        pageBean.setTotal(list.size());
        pageBean.setTotalPage(totalPage);
        pageBean.setCurPage(page);

        for (int i = startItem; i <= endItem; i++) {
            fileList.add(list.get(i));
        }
        pageBean.setRows(fileList);
        return pageBean;
    }

    /**
     * 前台显示模板数据包含有admin的模板数据
     * @param page
     * @param rowCount
     * @param template
     * @param templateName
     * @param templateCategoryName
     * @param session
     * @return
     */
    @ResponseBody
    @RequestMapping("selectAllByAnyThingVim")
    public PageBean selectAllTipAnyThingVim(Integer page, Integer rowCount, Template template,
                                         String templateName,String templateCategoryName, HttpSession session,HttpServletRequest request) {
        if (page == null || page == 0) {
            page = 1;
        }
        if (rowCount == null) {
            rowCount = PAGE_NUMBER_VIM;
        }

        User user = (User) session.getAttribute(Constants.USER_KEY);
        if(null == template.getAdminId() && null == template.getVuserid()){
            template.setUserid(user.getId());
        }else if(null != template.getAdminId() && null == template.getVuserid()){
            template.setAdminId(1);
        }else if(null == template.getAdminId() && null != template.getVuserid()){
            template.setVuserid(user.getId());
        }

        template.setTemplateName(templateName);
        if("系统模板".equals(templateCategoryName) || "私人模板".equals(templateCategoryName)){
            template.setTemplateCategoryName(null);
        }else if(!"".equals(templateCategoryName)){
            template.setTemplateCategoryName(templateCategoryName);
        }
        List<Template> list = templateService.selectAllByUserIdVim(template);

        if(null != template.getTcid()){
            //将文件下所有的模板都查询出来
            List<TemplateCategory> menuList = templateCategoryService.selectAll(new TemplateCategory());
            List<Integer> ids =  getChildNodes(menuList,template.getTcid(),new LinkedList());
            for(Integer id : ids ){
                Template template1 = new Template();
                template1.setTcid(id);
                List<Template> templateList = templateService.selectAllByUserId(template1);
                if(templateList != null){
                    for (int i = 0; i <templateList.size() ; i++) {
                        list.add(templateList.get(i));
                    }
                }
            }
        }

        for (Template config : list) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            config.setTemplateUpdateTimes(dateFormat.format(config.getTemplateUpdateTime()));
            String webPath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath();
        }


        List fileList = new ArrayList<>();
        int startItem = (page - 1) * rowCount;
        int endItem = page * rowCount - 1;
        int totalPage = 0;
        if (rowCount > list.size()) {
            totalPage = 1;
        } else {
            totalPage = list.size() % rowCount == 0 ? list.size() / rowCount : list.size() / rowCount + 1;
        }
        if (endItem > list.size() - 1) {
            endItem = list.size() - 1;
        }
        PageBean pageBean = new PageBean();

        pageBean.setTotal(list.size());
        pageBean.setTotalPage(totalPage);
        pageBean.setCurPage(page);

        for (int i = startItem; i <= endItem; i++) {
            fileList.add(list.get(i));
        }
        pageBean.setRows(fileList);
        return pageBean;
    }

    /**
     * 添加模板案例
     * @param template
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "insertTemplate",method = RequestMethod.POST)
    public ResponseResult insertTemplate(Template template,MultipartFile file, HttpServletRequest request,HttpSession session){
        User user = (User) session.getAttribute(Constants.USER_KEY);
        if(null == user){
            return new ResponseResult(HttpStatus.EXPECTATION_FAILED, "用户未登录");
        }
        String URl = "upload\\"+user.getLoginname()+"\\"+System.currentTimeMillis()+"\\";
        String uploadUrl = request.getSession().getServletContext().getRealPath("/") + URl;
        String filename = file.getOriginalFilename();

        File dir = new File(uploadUrl);
        if (!dir.exists()) {
            dir.mkdirs();
        }

        System.out.println("文件上传到: " + uploadUrl + filename);

        File targetFile = new File(uploadUrl + filename);
        if (!targetFile.exists()) {
            try {
                targetFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        try {
            file.transferTo(targetFile);
        } catch (IllegalStateException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String webPath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath();

        template.setTemplatePictureName(filename);
        template.setUserid(user.getId());
        template.setTemplateUpdateTime(new Date());
        template.setTemplatePictureDirectory(URl);
//        Integer a =  templateService.insert(template);
        Integer tempalateId =  templateService.insertTemplate(template);
//       if(1 == a){
//           return new ResponseResult(HttpStatus.OK, "添加成功");
//       }
//        return new ResponseResult(HttpStatus.EXPECTATION_FAILED, "添加失败");
       if(-1!= tempalateId){
           return new ResponseResult(HttpStatus.OK, "添加成功",tempalateId);
       }
        return new ResponseResult(HttpStatus.EXPECTATION_FAILED, "添加失败");

    }


    /**
     * 模板案例删除
     * @param templateIds 传入的id
     * @return
     */
    @ResponseBody
    @RequestMapping("delTemplate")
    public ResponseResult delTemplate(String templateIds){
        String[] templateId = templateIds.split(",");
        Integer integer = templateService.deleteById(templateId);
        if (0 != integer) {
            return new ResponseResult(HttpStatus.OK, "删除成功");
        } else {
            return new ResponseResult(HttpStatus.EXPECTATION_FAILED, "删除失败");
        }
    }

    /**
     * 修改模板信息
     * @param template
     * @return
     */
    @ResponseBody
    @RequestMapping("updateTemplate")
    public ResponseResult updateTemplate(Template template){
        template.setTemplateUpdateTime(new Date());
        templateService.updateByPrimaryKey(template);
        return new ResponseResult(HttpStatus.OK, "修改成功");
    }

    /**
     * 模板库查询目录分级
     * @param session
     * @param modelMap
     * @param pid 父id
     * @param adminId admin用户Id
     * @return
     */
    @RequestMapping(value = "selectClassify")
    @ResponseBody
    public ResponseResult templateLibrary(HttpSession session,ModelMap modelMap,Integer pid,Integer adminId) {
        User user = (User) session.getAttribute(Constants.USER_KEY);
        List<TemplateCategory> treeList;
        if(null != adminId){
            treeList =   templateCategoryService.selectZtree(adminId,pid,1);
        }else {
            treeList =   templateCategoryService.selectZtree(user.getId(),pid,1);
        }
        return new ResponseResult(HttpStatus.OK, "查询成功", treeList);
    }

    /**
     * 拷贝工作流(创建新的工作流)
     * @param session
     * @return
     */
    @RequestMapping(value = "copyWorkFlow")
    @ResponseBody
    public ResponseResult copyWorkFlow(HttpSession session,Integer workFlowId,String workFlowName,Integer workSpaceId) {
        User user = (User) session.getAttribute(Constants.USER_KEY);
        WorkFlow workFlow = workFolwService.selectByPrimaryKey(workFlowId);
        workFlow.setName(workFlowName);

        workFlow.setUserName(user.getLoginname());
        workFlow.setFlowExplain("说明");
        workFlow.setWorkspid(workSpaceId);
        workFlow.setCreateTime(new Date());
        workFlow.setResultContect(null);
        workFlow.setUpdatTime(null);
        Integer id = workFolwService.insert(workFlow);
        if(null != id){
            return new ResponseResult(HttpStatus.OK, "创建新的工作流成功",id);
        }

        return new ResponseResult(HttpStatus.EXPECTATION_FAILED, "创建新的工作流失败");
    }


        /**
         * 先查询出父节点相关集合，在遍历出子节点id集合
         * @param list 父节点相关集合
         * @param parentId
         * @param returnList
         * @return
         */
    public static List<Integer> getChildNodes(List<TemplateCategory> list, Integer parentId, List returnList) {
        if (list == null && parentId == null)
        {
            return null;
        }
        for (Iterator<TemplateCategory> iterator = list.iterator(); iterator.hasNext();) {
            TemplateCategory node = (TemplateCategory) iterator.next();
            // 一、根据传入的某个父节点ID,遍历该父节点的所有子节点
            if (parentId.equals(node.getTemplateCategoryPid())) {
                returnList.add(node.getTemplateCategoryId());
                //递归遍历子后子
                getChildNodes(list, node.getTemplateCategoryId(), returnList);
            }
        }
        return returnList;
    }




}
