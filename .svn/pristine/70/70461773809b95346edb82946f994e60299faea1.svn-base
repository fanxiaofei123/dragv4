//获取颜色值
$.fn.getBackgroundColor = function() {
    console.log($(this).css('background-color'));
    var rgb = $(this).css('background-color');
    console.log("rgb:"+ rgb)
    if(rgb >= 0){
        return rgb;    //如果是一个hex值则直接返回
    }else{
        rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        function hex(x) {return ("0" + parseInt(x).toString(16)).slice(-2);}
        rgb= "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
    }
    return rgb;
};

//拖拽时模块样式
function draggingModel(event, ui) {
    if (event.type == "mousedown") {
        var previewUi = event.currentTarget;
        var par = $(previewUi).parents("ul");
        var bor = par.find("li");
        var fontIcon = bor.find("i");
        var fontIconClass = fontIcon[0].classList[1];
        // var borClass = bor[0].classList[1];
        // var bgClass = borClass.replace(/border/, "bg");
        // var fontClass = borClass.replace(/border/, "font");
        var borClass ="border-common-color";
        var bgClass = "common-bg-color";
        var fontClass = "common-color";
        var html = $(previewUi).html();
        var blockStr = '<div class="portlet ' + borClass + ' ' + bgClass + ' box" style="height: 4.3%;">'
            + '<div class="portlet-title">'
            + '<div class="tools">'
            + '</div></div>'
            + '<div class="portlet-body boxBody">'
            + '<div class="myicon text-center '+ fontClass+'"><i class="fa ' + fontIconClass + ' fa-2x"></i></div>'
            + '<h5 class="text-center"><span class="modelName">' + html + '</span></h5>'
            + '</div></div>';
    }
    return blockStr;
}

//生成拖拽模块
var i = 0;
var configObj = [];
//设置showQueryFlag，记录sqlStatment输入框弹出的状态
var showQueryFlag = "hide";
//设置一个flag来保存sqlStatment输入框弹出的状态，false代表未显示输入框，true代表显示输入框。
function createNode(event, ui, block){
    console.log(configObj);

    var lastId = $("div.box:last").attr("id");
    if (lastId) {
        var lastIdNum = parseInt(lastId.substring(10));
        i = lastIdNum;
    }

    if(ui){
        var scale = $("#canvasBlock").css("transform");
        var scaleStr = scale.slice(7, -1);
        var scaleNum = scaleStr.split(",")[0];
        var par = $(ui.draggable[0]).parents("ul");
        var bor = par.find("li");
        var fontIcon = bor.find("i");
        var fontIconClass = fontIcon[0].classList[1];
        // var borClass = bor[0].classList[1];
        // var bgClass = borClass.replace(/border/, "bg");
        // var fontClass = borClass.replace(/border/, "font");
        var borClass ="border-common-color";
        var bgClass = "common-bg-color";
        var fontClass = "common-color";
        console.log("bgClass111111121:"+$("." + bgClass).css('background-color'));
        var modelColor = $("." + bgClass).getBackgroundColor();
        console.log("modelColor111111121:"+modelColor);
        var left = parseInt((ui.offset.left - $(this).offset().left - $("#canvasBlock")[0].offsetLeft) / scaleNum);
        var top = parseInt((ui.offset.top - $(this).offset().top - $("#canvasBlock")[0].offsetTop) / scaleNum);
        var name = par[0].id;
        var html = $(ui.draggable[0]).html();
        var egHtml = $(ui.draggable[0]).siblings(".nameEnglish").val();
        var tem = egHtml.replace(/\s/g, "");
        var modelId = $("#" + tem).val();
        var trainedId = $(ui.draggable[0]).siblings("#modelTrainedId").val();
    }
    else{
        var left = block.BlockX;
        var top = block.BlockY;
        var name = block.Name;
        var html = block.BlockContent;
        var borClass = block.BlockBorClass;
        var bgClass = block.BlockBgClass;
        console.log("bgClass:"+bgClass);
        var modelColor = $("." + bgClass).getBackgroundColor();
        console.log("modelColor2222222:"+modelColor);
        var fontClass = block.BlockFontClass;
        var fontIconClass = block.BlockFontIconClass;
        var id = block.BlockId;
        var modelList = $(".operatorBlock").find("h3.ui-draggable");
        for (var j = 0; j < modelList.length; j++) {
            if ($(modelList[j]).text() == html) {
                var egHtml = $(modelList[j]).siblings(".nameEnglish").val();
            }
        }
        var tem = egHtml.replace(/\s/g, "");
        var modelId = $("#" + tem).val();
    }

    if(id){

    }else{
        i++;
        id = "stateModel" + i;
    }
    console.log(id);
    var tooltipStr = "<div class='tooltipInfo'>" + html +"</div>";
    // var str = '<div class="portlet ' + borClass + ' ' + bgClass + ' box" data-nodeName="'+ name +'" id="' + id + '" data-toggle="tooltip" title="' + tooltipStr + '">'
    var str = '<div class="portlet ' + borClass + ' ' + bgClass + ' box" data-nodeName="'+ name +'" id="' + id + '">'
        + '<div class="portlet-title">'
        + '<div class="tools">'
        + '<input type="hidden" name="modelId" value="'+modelId+'" />'
        + '<a class="icon-close" href="javascript:;" data-original-title="" title=""> </a>'
        + '</div></div>'
        + '<div class="portlet-body boxBody">'
        + '<div class="myicon text-center '+ fontClass+'"><i class="fa ' + fontIconClass + ' fa-2x"></i></div>'
        + '<h5 class="text-center"><span class="modelName" title="' + html + '">' + html + '</span></h5>'
        + '</div></div>';


    //基本连接线样式
    var connectorPaintStyle = {
        strokeWidth: 1,
        stroke: "#1bbc9b"
    };
    // 鼠标悬浮在连接线上的样式
    var connectorHoverStyle = {
        strokeWidth: 2,
        stroke: "#1bbc9b"
    };
    // 鼠标悬浮在连接点上的样式
    var endpointHoverStyle = {
        fill: modelColor,
        stroke: modelColor,
        radius: 7
    };
    var rectHoverStyle = {
        fill: modelColor,
        stroke: modelColor,
        width: 15,
        height: 15
    };
    var diaHoverStyle = {
        fill: modelColor,
        stroke: modelColor,
        width: 13,
        height: 13
    };
    var endpointStyle={
        fill: "#fff",
        stroke: modelColor,
        radius: 6
    };
    //hive样式
    var linkCircleIn = {
        endpoint: "Dot",  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: endpointHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            radius: 5,
            strokeWidth: 1
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: false,    //是否可以拖动（作为连线起点）
        scope: "dot",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: true,    //是否可以放置（连线终点）
        maxConnections: 1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    var linkCircleOut = {
        endpoint: "Dot",  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: endpointHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            radius: 5,
            strokeWidth: 1
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: true,    //是否可以拖动（作为连线起点）
        scope: "dot",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: false,    //是否可以放置（连线终点）
        maxConnections: -1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    //model样式
    var linkSquareIn = {
        endpoint: ["Rectangle", {width:10, height:10}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: rectHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: false,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: true,    //是否可以放置（连线终点）
        maxConnections: 1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    var linkSquareOut = {
        endpoint: ["Rectangle", {width:10, height:10}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: rectHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: true,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: false,    //是否可以放置（连线终点）
        maxConnections: -1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    //view样式
    var linkDiamondIn = {
        endpoint: ["Rectangle", {cssClass:"rotateModel",width:13, height:13}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: diaHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: false,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: true,    //是否可以放置（连线终点）
        maxConnections: 1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    var linkDiamondOut = {
        endpoint: ["Rectangle", {cssClass:"rotateModel",width:13, height:13}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: diaHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: true,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: false,    //是否可以放置（连线终点）
        maxConnections: -1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };

    //循环模块接口实例
    function createInterface(el, d) {
        var rightInterface = $("#" + el).siblings(".rightNumber").val().split(",");
        var leftInterface = $("#" + el).siblings(".leftNumber").val().split(",");
        for (var i = 0; i < leftInterface.length; i++) {
            if (leftInterface == "") {

            }
            else {
                jsPlumb.addEndpoint(d, { anchors: [ i/3 + 0.5, 0, 0, -1 ] },eval(leftInterface[i]));
            }
        }
        for (var k = 0; k < rightInterface.length; k++) {
            if (rightInterface == "") {

            }
            else {
                jsPlumb.addEndpoint(d, { anchors: [ k/3 + 0.5, 1, 0, 1 ] }, eval(rightInterface[k]));
            }
        }
    }

    $("#canvasBlock").append(str);
    // if (ui) {
    //
    // }
    // else {
    //     for (var h = 0; h < configObj.length; h++) {
    //         if (configObj[h].BlockId == id) {
    //             for (var l = 0; l < configObj[h].data.length; l++) {
    //                 if (configObj[h].data[l].configName == "CustomModelDescription") {
    //                     $("#" + id).append('<p class="blockInfo">' + configObj[h].data[l].configVal + '</p>');
    //                 }
    //             }
    //         }
    //     }
    // }
    $("#" + id).css("left", left).css("top", top);
    createInterface(tem, id);
    jsPlumb.draggable(id, { containment: false });
    jsPlumb.bind("connection", function (connInfo, originalEvent) {
        if (connInfo.connection.sourceId == connInfo.connection.targetId) {
            jsPlumb.detach(connInfo);
        }
    });
    //switch (name) {
    //    case "import":
    //        $("#canvasBlock").append(str);
    //        $("#" + id).css("left", left).css("top", top);
    //        createInterface(tem, id);
    //        jsPlumb.draggable(id, { containment: false });
    //        break;
    //    case "export":
    //        $("#canvasBlock").append(str);
    //        $("#" + id).css("left", left).css("top", top);
    //        createInterface(tem, id);
    //        jsPlumb.draggable(id,{ containment: false });
    //        break;
    //    case "transfer":
    //        $("#canvasBlock").append(str);
    //        $("#" + id).css("left", left).css("top", top);
    //        createInterface(tem, id);
    //        jsPlumb.draggable(id,{ containment: false });
    //        break;
    //    case "attribution":
    //    case "classification":
    //    case "regression":
    //    case "clustering":
    //    case "associate":
    //    case "text":
    //        $("#canvasBlock").append(str);
    //        $("#" + id).css("left", left).css("top", top);
    //        jsPlumb.addEndpoint(id, { anchors: "TopRight" }, linkCircleOut);
    //        jsPlumb.addEndpoint(id, { anchors: "LeftMiddle" }, linkSquareIn);
    //        console.log(jsPlumb);
    //        jsPlumb.draggable(id,{ containment: false });
    //        break;
    //    case "predict":
    //        $("#canvasBlock").append(str);
    //        $("#" + id).css("left", left).css("top", top);
    //        jsPlumb.addEndpoint(id, { anchors: [ 0, 0.8, 0, 1 ] }, linkCircleIn);
    //        jsPlumb.addEndpoint(id, { anchors: [ 0, 0.5, 0, 1 ] }, linkSquareIn);
    //        jsPlumb.addEndpoint(id, { anchors: [ 1, 0.33333333, 0, 1 ] }, linkCircleOut);
    //        jsPlumb.draggable(id,{ containment: false });
    //        break;
    //}
    if (ui) {
        configModel( trainedId,id, modelId, html, tem, bgClass);
        var modelInterface = $("#" + id).nextUntil(".box");
        $("#" + id).css("box-shadow", "2px 2px 19px #aaa");//选中效果
        $("#" + id).siblings(".box").css("box-shadow", "2px 2px 19px rgba(9,84,109,0.1)");//选中效果
        $("#" + id).css("z-index", "9");//选中层级提高
        modelInterface.css("z-index", "10");//选中层级提高
        $("#" + id).siblings(".box").css("z-index", "0");
        $(".jtk-endpoint").not(modelInterface).css("z-index", "1");
    }
}

//序列化运行并保存模块数据
var serliza = "";
var schJobRunning=false;
function run() {
    $.ajax({
        url:basePath+"/drag/scheduler/checkSchJobRunning.do",
        type: 'POST',
        dataType: "json",
        data:{'flowId':$("#flowId").val()},
        success: function (data) {
            schJobRunning=data;
            if(schJobRunning==false){
                //第一步，先判断工作流配置里面是否包含有数据库连接的算子
                var isContainsDbModel = false;
                for (var i = 0; i < configObj.length; i++){
                    for (var k = 0; k < configObj[i].data.length; k++) {
                        if(configObj[i].data[k].configName == "dbLinkName"){
                            isContainsDbModel = true;
                        }
                    }
                }

                //第二步，判断工作流中的数据库配置的连接名和表名，判断是否已经删除了。
                //1.拿到所有的连接名
                var connNames = "";
                $.ajax({
                    url:basePath+"/drag/modelattri/LoadConnNames.do",
                    type: 'GET',
                    async: false,
                    contentType: "text",
                    success: function (data) {
                        connNames = data;
                    },
                    error: function () {}
                })

                var isCorrectConfig = true;
                if(isContainsDbModel){
                    for (var i = 0; i < configObj.length; i++){
                        for (var k = 0; k < configObj[i].data.length; k++) {
                            if(configObj[i].data[k].configName.trim() == "dbLinkName"){
                                var configVal = configObj[i].data[k].configVal;
                                var selectedConfigVal = configVal.split("|")[1];
                                if(selectedConfigVal == "" || selectedConfigVal == null || selectedConfigVal == undefined){
                                    isCorrectConfig = false;
                                }else{
                                    if(connNames.indexOf(selectedConfigVal) == -1){
                                        isCorrectConfig = false;
                                    }
                                }
                            }
                        }
                    }
                }

                //如果工作流中包含数据库连接算子，并且数据库配置中的连接名已经被删除了。
                if(isContainsDbModel && !isCorrectConfig){
                    toastr.error("model配置错误，请检查");
                }else{
                    //运行工作流
                    // 工作流运行清除状态
                    $.each(allType,function (i,value) {
                        $("#"+value+" .boxBody").removeClass("fail-type success-type");
                    });
                    // end
                    var connects = [];
                    $.each(jsPlumb.getAllConnections(), function (idx, connection) {
                        var cont = connection.getLabel();
                        connects.push({
                            ConnectionId: connection.id,
                            PageSourceId: connection.sourceId,
                            PageTargetId: connection.targetId,
                            SourceText: connection.source.children[1].textContent,
                            TargetText: connection.target.children[1].textContent,
                            SourceAnchor: [connection.endpoints[0].anchor.x, connection.endpoints[0].anchor.y, connection.endpoints[0].anchor.orientation[0], connection.endpoints[0].anchor.orientation[1]],
                            TargetAnchor: [connection.endpoints[1].anchor.x, connection.endpoints[1].anchor.y, connection.endpoints[1].anchor.orientation[0], connection.endpoints[1].anchor.orientation[1]],
                            ConnectText: $(cont).html()
                        });
                    });

                    var blocks = [];
                    $(".box").each(function (idx, elem) {
                        var $elem = $(elem);
                        var name = $elem[0].dataset.nodename;
                        var fontClass = $elem.find(".myicon")[0].classList[2];
                        var fontIconClass = $elem.find(".fa")[0].classList[1];

                        blocks.push({
                            BlockId: $elem.attr('id'),
                            BlockContent: $elem.find(".boxBody").text().replace(/\s/g, ""),
                            BlockX: parseInt($elem.css("left"), 10),
                            BlockY: parseInt($elem.css("top"), 10),
                            BlockBorClass: $elem[0].classList[1],
                            BlockBgClass: $elem[0].classList[2],
                            BlockFontClass: fontClass,
                            BlockFontIconClass: fontIconClass,
                            Name: name
                        });
                        console.log(blocks);
                    });
                    //注释
                    var notes=[];
                    $(".noteDiv").each(function (idx, elem) {
                        var $elem = $(elem);
                        console.log($elem);
                        notes.push({
                            NoteId:$elem.attr('id'),
                            NoteContent: $elem.find(".noteTextarea").val(),
                            NoteX: parseInt($elem.css("left"), 10),
                            NoteY: parseInt($elem.css("top"), 10),
                            NoteBgColor:  $elem.find(".noteTextarea").css("background-color"),
                            NoteTextAlign: $elem.find(".noteTextarea").css("text-align")
                        });
                    });
                    console.log(notes);

                    //var configs = new Array();
                    //for (var i = 0; i < sessionStorage.length; i++) {
                    //    var key = sessionStorage.key(i);
                    //    var keyValue = sessionStorage[key];
                    //    tmp = {};
                    //    tmp.configId = key.substring(6);
                    //    tmp.configValue = keyValue;
                    //    configs.push(tmp);
                    //}

                    //serliza = JSON.stringify(connects) + "&" + JSON.stringify(blocks);
                    //var parm = {};
                    //parm.serliza = serliza;
                    //parm.configs = configs;
                    //parm.flowId = $('#flowId').val();

                    var runings = $.trim($("#running").html());
                    if( runings == "运行中。。"){
                        alert("工作电子流正在运行中......");
                    }else{
                        $.ajax({
                            url:basePath+"/drag/calculation/run.do",
                            type: 'POST',

                            data:{'modelStr':JSON.stringify(configObj),'connectStr':JSON.stringify(connects),"blocksStr":JSON.stringify(blocks),"notesStr":JSON.stringify(notes),'flowId':$("#flowId").val(),'flowName':$("#flowName").val(),"workSpaceName":$("#workSpaceName").val()},
                            success: function (data) {
                                var result = JSON.parse(data);
                                var historys = result.obj.historys;
                                var jobId = result.obj.jobId;
                                console.log(jobId);
                                $("#usrId").val(jobId);


                                console.log(jobId);

                                switch (result.code){
                                    case 417:
                                        toastr.error("model配置错误，请检查");
                                        break;
                                    case 200:$("#jobId").val(jobId);$("#iconInfo").click();showCalculationHistory(historys);
                                        break;
                                }


                            },
                            error: function () {
                                // alert("连接错误，请重试！")
                            }
                        });
                    }
                }
            }else {
                toastr.warning("当前的工作流正在调度任务中运行，不能运行此工作流！！！");
            }
        }
     })


}


function calculationPause() {

    $.ajax({
        url:basePath+"/drag/calculation/pause.do",
        type: 'POST',

        data:{'jobId':$("#jobId").val(),'workFlowId':$("#flowId").val()},
        success: function (data) {
            var result = JSON.parse(data);
            switch (result.code){
                case 417:
                    toastr.error("暂停错误");
                    break;
                case 200:$("#iconInfo").hide();
                    break;
            }


        }
    });
}

//保存工作流
function save() {

    var connects = [];
    $.each(jsPlumb.getAllConnections(), function (idx, connection) {
        var cont = connection.getLabel();
        console.log(jsPlumb.getAllConnections());
        console.log(connection);
        // 获取连接形状
        var sourceId=connection.sourceId;
        var html=connection.source.children[1].textContent;
        var modelList = $(".operatorBlock").find("h3.ui-draggable");
        for (var j = 0; j < modelList.length; j++) {
            if ($(modelList[j]).text() == html) {
                var connectType = $(modelList[j]).siblings(".rightNumber").val();
            }
        }
        connectType=connectType.substr(4 ,6);

        // end
        connects.push({
            ConnectionId: connection.id,
            PageSourceId: connection.sourceId,
            PageTargetId: connection.targetId,
            SourceText: connection.source.children[1].textContent,
            TargetText: connection.target.children[1].textContent,
            SourceAnchor: [connection.endpoints[0].anchor.x, connection.endpoints[0].anchor.y, connection.endpoints[0].anchor.orientation[0], connection.endpoints[0].anchor.orientation[1]],
            TargetAnchor: [connection.endpoints[1].anchor.x, connection.endpoints[1].anchor.y, connection.endpoints[1].anchor.orientation[0], connection.endpoints[1].anchor.orientation[1]],
            ConnectText: $(cont).html(),
            ConnectType: connectType
        });
        console.log(connects);
    });


    var blocks = [];
    $(".box").each(function (idx, elem) {
        var $elem = $(elem);
        console.log($elem);
        var name = $elem[0].dataset.nodename;
        var fontClass = $elem.find(".myicon")[0].classList[2];
        var fontIconClass = $elem.find(".fa")[0].classList[1];
        blocks.push({
            BlockId: $elem.attr('id'),
            BlockContent: $elem.find(".boxBody").text().replace(/\s/g, ""),
            BlockX: parseInt($elem.css("left"), 10),
            BlockY: parseInt($elem.css("top"), 10),
            BlockBorClass: $elem[0].classList[1],
            BlockBgClass: $elem[0].classList[2],
            BlockFontClass: fontClass,
            BlockFontIconClass: fontIconClass,
            Name: name
        });
    });

    console.log(blocks);

    //注释
    var notes=[];
    $(".noteDiv").each(function (idx, elem) {
        var $elem = $(elem);
        console.log($elem);
        notes.push({
            NoteId:$elem.attr('id'),
            NoteContent: $elem.find(".noteTextarea").val(),
            NoteX: parseInt($elem.css("left"), 10),
            NoteY: parseInt($elem.css("top"), 10),
            NoteBgColor:  $elem.find(".noteTextarea").css("background-color"),
            NoteTextAlign: $elem.find(".noteTextarea").css("text-align")
        });
    });
    console.log(notes);

    $.ajax({
        url:basePath+"/drag/flow/createflow.do",
        type: 'POST',

        data:{'fieldStr':JSON.stringify(field),'modelStr':JSON.stringify(configObj),'connectStr':JSON.stringify(connects),"blocksStr":JSON.stringify(blocks),"notesStr":JSON.stringify(notes),'flowId':$("#flowId").val(),'flowName':$("#flowName").val(),"workSpaceName":$("#workSpaceName").val()},
        success: function (data) {
            var data = JSON.parse(data);
            switch (data.code){
                case 417:
                    toastr.error("model配置错误，请检查");
                    break;
                case 200:
                    toastr.success("保存成功");
                    break;
            }
        }
    });
}


function updateFlow(){

    $.ajax({
        url:basePath+"/drag/flow/updateFlow.do",
        type: 'POST',
        data:{'id':$("#flowId").val()},
        success: function (data) {
            var data = JSON.parse(data);
            switch (data.code){
                case 417:
                    toastr.error(data.msg);
                    break;
                case 200:
                    toastr.success(data.msg);
                    break;
            }
        }
    });
}



function ContinueFlow(){

    $.ajax({
        url:basePath+"/drag/flow/continueFlow.do",
        type: 'POST',
        data:{'id':$("#flowId").val()},
        success: function (data) {
            var data = JSON.parse(data);
            switch (data.code){
                case 417:
                    toastr.error(data.msg);
                    break;
                case 200:
                    toastr.success(data.msg);
                    break;
            }
        }
    });



}

//重载模块
function reload(event){
    $("#canvasBlock").html('');
    //var str = serliza;
    //var connectData = str.split("&")[0];
    //var blockData = str.split("&")[1];
    console.log($("#returnData").text());
    // alert($("#returnData").text())
    var workFlow = JSON.parse($("#returnData").text());
    var connect = JSON.parse(workFlow.connects);
    var block = JSON.parse(workFlow.blocks);
    var config = JSON.parse(workFlow.models);

    if(workFlow.fields!=undefined){
        var fields = JSON.parse(workFlow.fields);
        if(fields.length > 0){
            for (var i = 0; i < fields.length; i++) {
                field.push(fields[i]);
            }
        }
    }
    if(workFlow.notes!=undefined){
        var note=JSON.parse(workFlow.notes);
        if(note.length > 0){
            for(var j=0;j<note.length;j++){
                createNoteWrite(event,note[j],note[j].NoteX,note[j].NoteY,note[j].NoteId);
            }
        }
    }
    for (var i = 0; i < config.length; i++) {
        configObj.push(config[i]);
    }

    var conn = "";

    console.log(connect);
    console.log(block);
    console.log(config);
    console.log(note);

    // 鼠标悬浮在连接线上的样式
    var connectorHoverStyle = {
        lineWidth: 4,
        stroke: "#1bbc9b",
        outlineWidth: 2,
        outlineColor: "white"
    };
    //基本连接线样式
    var connectorPaintStyle = {
        endpointStyle:{ fill: "transparent" },
        paintStyle : { stroke:"#1bbc9b" },
        overlays: [["Arrow", { width: 10, length: 10, location: 1 }]],
        isSource: true,    //是否可以拖动（作为连线起点）
        isTarget: true,
        connectorHoverStyle: connectorHoverStyle
    };

    if(block.length > 0){
        for(i = 0; i < block.length; i++){
            createNode(event, "", block[i]);
        }

        for(i = 0; i < connect.length; i++){
            conn = "jsPlumb.connect({ source: \"" + connect[i].PageSourceId + "\", target: \"" + connect[i].PageTargetId +
                "\", anchors:[[" + connect[i].SourceAnchor + "],[" + connect[i].TargetAnchor + "]]}, connectorPaintStyle);";
            var myScript = "jsPlumb.ready(function () {" + conn + "});";
            console.log(myScript);
            eval(myScript);
        }

    }
    onloadType()
}

//设置算子标签
function setTags() {
    $("#canvasBlock").on("click", "div.box .icon-tag", function () {
        $("#basicTags").modal();
        return false;
    })
}

//删除模块
function removeModel() {
    $("#canvasBlock").on("click", "a.icon-close", function () {
        $(this).parents("div.box").tooltip("destroy");
        var blockId = $(this).parents("div.box").attr("id");
        for (var i = 0; i < configObj.length; i++) {
            if (configObj[i].BlockId == blockId) {
                configObj.splice(i,1);
            }
        }
        var conn = $(this).parents(".portlet");
        jsPlumb.remove(conn);
        $('body').removeClass('page-quick-sidebar-open');
        return false;
    });
}

//搜索模块
function filterModel() {
    $("#formInput").keyup(function () {
        if ($(this).val() == "" || $(this).val() == null) {
            $(".mt-list-item").show();
            $("div.panel-collapse").removeClass("in");
            $("div.panel-collapse").css("height", "0");
        }
        else {
            var searchedList = $(".mt-list-item").filter(":contains('"+($(this).val())+"')");
            console.log($(this).val());
            $(".mt-list-item").hide();
            searchedList.show();
            searchedList.parents("div.panel-collapse").addClass("in");
            searchedList.parents("div.panel-collapse").css("height", "");
        }
    }).keyup();
}

//生成配置信息的树形结构
var levelArr = [];
function initFloderConstruct() {
    $("#configForm").on("click", "a.btnTreeModal", function () {
        $("#jiazai").show();
        var aTreeVal = $(this).attr("value");
        $.jstree.destroy("#tree_1");
        $("#tree_1").html("<ul id='file-choice'></ul>");
        initAtree(aTreeVal)
    });
}




function initAtree(aTreeVal){
    $.get(basePath+"/drag/hdfs/fileConstruct.do?paths="+aTreeVal,function (fileConstruct) {
        var datas = JSON.parse(fileConstruct);
        console.log(datas);
        jQuery.each(datas, function (i,file) {
            var $userRoot = $("#tree_1");
            createFileLabelToHtml(file,$userRoot,$("<ul></ul>"));
        });
        var ulNode = "";
        var datasChildren;
        var isDir;
        var dirName;
        for (var i = 0; i < datas.length; i++) {
            isDir = datas[i].filefloderInfo.isdir;
            dirName = datas[i].filefloderInfo.name;
            ulNode += "<li file-url='"+datas[i].filefloderInfo.path+"' ";
            if (isDir == true) {
                ulNode += 'data-jstree='
                    +'{ "opened" : false }'
                    +'>'
                    +dirName
                    +'<ul>';
                datasChildren = datas[i].childFiles;
                findAllChildFile(datasChildren);
                ulNode += '</ul></li>';
            }
            else {
                ulNode += 'data-jstree='
                    +'{ "type" : "file" }'
                    +'>'
                    +dirName
                    +'</li>';
            }
            function findAllChildFile(datasChildren) {
                for (var k = 0; k < datasChildren.length; k++) {
                    isDir = datasChildren[k].filefloderInfo.isdir;
                    dirName = datasChildren[k].filefloderInfo.name;
                    if (isDir == true) {
                        ulNode += "<li file-url='"+datasChildren[k].filefloderInfo.path+ "' data-jstree="
                            +"{ 'opened' : false }"
                            +">"
                            +dirName
                            +"<ul>";
                        var datasChildrenA = datasChildren[k].childFiles;
                        findAllChildFile(datasChildrenA);
                        ulNode += '</ul></li>';
                    }
                    else {
                        ulNode +="<li file-url='"+datasChildren[k].filefloderInfo.path+"' data-jstree="
                            +"{ 'type' : 'file' }"
                            +">"
                            +dirName
                            +"</li>";
                    }
                }
            }
        }
        console.log(ulNode);
        $("#file-choice").html(ulNode);
        $("#jiazai").hide();
        handleSample1();
        //treeBtnClickInit();
    });
}
function createFileLabelToHtml(file,$parentLabel,$ul) {
    var childFiles = file.childFiles;
    for (var i = 0; i < childFiles.length; i++) {
        levelArr.push(childFiles[i].level);
    }
//       $parentLabel.append($ul.append(new FileLabel(file.filefloderInfo).create()));

    jQuery.each(childFiles,function (i,file) {
        createFileLabelToHtml(file);

    });
    levelArr.sort();
}

//拖拽生成配置模块
function configModel( trainedModelId, id, modelId, html, tem, bgClass) {
    var data = {};
    data.modelId = modelId;
    data.trainedModelId = trainedModelId;
    console.log(modelId);
    console.log(data);
    $.ajax({
        url:basePath+"/drag/modelattri/get.do",
        type: 'POST',
        data: data,
        // data:"modelId=" + modelId,
        async: false,
        // cache: false,
        // contentType: false,
        // processData: false,
        success: function (data) {
            var returndata = JSON.parse(data);
            console.log("===============" + returndata.msg);
            console.log(returndata);
            var databaseJson = returndata.msg;
            var databaseInfo = $.parseJSON(databaseJson);
            var connNames = databaseInfo.connNames;
            // var tableNames = databaseInfo.tables;
            /*switch (returndata.code){
             case 417:toastr.error(returndata.msg) ;
             close();
             break;
             case 200:toastr.success(returndata.msg);
             close();

             //window.location.reload();
             break;
             }*/
            if(returndata.code == 200){
                var configData = [];
                var configInfo = $("#" + tem).siblings(".modelInfo").val();
                $('body').addClass('page-quick-sidebar-open');
                // $("#sp").text(html + "参数配置");
                $("#sp").text(html);
                $("#modelInfo").html(configInfo);
                $("#formBody").html("");
                $("#formBody").attr("name", id);

                var options = "";
                // var optionsTables = "";
                // var splits = null;
                // var splitTables = null;
                if(connNames != null && connNames != "" && connNames != "null"){
                    splits = connNames.split(",");
                    for(var i=0; i<splits.length; i++){
                        var tableName = splits[i];
                        if(tableName.length > 11){
                            tableName = tableName.substring(0,11)
                        }
                        options += '<option value="'+splits[i]+'" title="'+ splits[i]+ '">'+ tableName +'</option>';
                    }
                }

                // if(tableNames != null && tableNames != "" && tableNames != "null"){
                //     splitTables = tableNames.split(",");
                //     for(var i = 0; i < splitTables.length; i++){
                //         optionsTables += '<option value="'+splitTables[i]+'">'+ splitTables[i] +'</option>';
                //     }
                // }

                // console.log("+++++++++" + options);

                for (var i = 0; i < returndata.obj.length; i++){
                    var configModelId = returndata.obj[i].modelId;
                    var configType = returndata.obj[i].type;
                    var configVal = returndata.obj[i].mvalue;
                    var configId = returndata.obj[i].id;
                    var configName = returndata.obj[i].mattribute;

                    // if(configModelId == modelId && configModelId == 55){
                    //     if(configName == "inputPath"){
                    //         configData.push({
                    //             configVal: configVal,
                    //             configName: configName
                    //         })
                    //     }
                    // }

                    if (configModelId == modelId && configType == 0) {
                        var str =  '<div class="form-group formBox formBoxHidden"><label class="control-label col-md-12 config-label">' +
                            configName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<input type="text" data-required="1" class="form-control" id="config'+configId+'" value="'+configVal+'" disabled="disabled"/></div></div>';
                        $("#formBody").append(str);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    if (configModelId == modelId && configType == 1) {
                        var showConfigName;
                        if(configName == "sampleSize"){
                            showConfigName = configName + "_" + "Num";
                        }else{
                            showConfigName = configName;
                        }
                        var ChineseConfigName = getChineseConfigName(showConfigName);
                        var configText;
                        //替换显示的null;
                        // alert(configVal);
                        if(configVal == null){
                            var configText = "";
                        }else{
                            configText = configVal;
                        }
                        var str =  '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<input type="text" data-required="1" class="form-control" id="config'+configId+'" value="'+configText+'" /></div></div>';
                        $("#formBody").append(str);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    if (configModelId == modelId && configType == 2) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        var selectConfigVal = configVal.split(",");
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<select class="form-control" id="config'+configId+'" name="select">';
                        var ChineseSelectConfigVal
                        for (var k = 0; k < selectConfigVal.length; k++) {
                            if(configName == "sampleType"){
                                ChineseSelectConfigVal    = getSelectConfigValForChi(configName + "|" + selectConfigVal[k]);
                                str += '<option value="' + selectConfigVal[k] + '">' + ChineseSelectConfigVal + '</option>';
                            }else{
                                str += '<option value="' + selectConfigVal[k] + '">' + selectConfigVal[k] + '</option>';
                            }
                        }
                        str += '</select></div></div>';
                        $("#formBody").append(str);
                        var selectedVal;
                        selectedVal = $("#config" + configId).children("option:selected").val();
                        $("#config" + configId).change(function () {
                            selectedVal = $(this).children("option:selected").val();
                            configData.push({
                                configId: "config"+configId,
                                configVal: configVal,
                                configSelectVal: selectedVal,
                                configType: configType,
                                configName: configName
                            });
                        });
                        console.log(selectedVal);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configSelectVal: selectedVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    if (configModelId == modelId && configType == 3) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<div class="input-group">' +
                            '<input type="text" class="form-control" id="config'+configId+'" data-required="1" value="'+configVal+'" title="'+configVal+'" disabled="disabled">' +
                            '<span class="input-group-btn">' +
                            '<a href="#basic" data-toggle="modal" class="btn btn-default btnUrl btnTreeModal" name="btnUrl" type="button" value="1"><i class="icon-doc"></i></a></span>' +
                            '</div></div></div>';
                        $("#formBody").append(str);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    if (configModelId == modelId && configType == 5) {
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            configName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<div class="input-group">' +
                            '<input type="text" class="form-control" id="config'+configId+'" data-required="1" value="'+configVal+'" title="'+configVal+'" disabled="disabled">' +
                            '<span class="input-group-btn">' +
                            '<a href="#basic" data-toggle="modal" class="btn btn-default btnUrl btnTreeModal" name="btnUrl" type="button" value="2"><i class="icon-doc"></i></a></span>' +
                            '</div></div></div>';
                        $("#formBody").append(str);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }

                    if(configModelId == modelId && configType ==7){
                        showQueryFlag = "hide";
                        if(configName=='sqlStatment'){
                            configVal = configVal + "|" + showQueryFlag;
                            var text = configVal.split("|")[0];
                            // alert(text)
                            if(text == "null"){
                                text = "";
                            }
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "SQL语句" +
                                '<span class="required"></span></label>' +
                                '<div class="col-md-12">' +
                                '<div class="input-group">' +
                                '<button class="form-control btn btn-sql" type="button" onclick="showQueryBox()">建立SQL查询</button></div>' +
                                '<div class="queryBox" style="display: none"><div class="input-group col-md-12">' +
                                '<textarea name="textarea" class="form-control col-md-12 textarea-sql" placeholder="请书写sql语句" data-required="1" class="form-control" id="config'+configId+'" value="'+configVal+'">' + text + '</textarea></div>' +
                                //     '<div class="input-group">' +
                                //     '<button class="btn">确认</button>&nbsp;&nbsp;<button class="btn">取消</button></div></div>'
                                // '</div>' +
                            '</div></div>' +
                             '<div class="form-group formBox"><label class="control-label col-md-12 config-label" id="sql-Check"></label></div>';
                            $("#formBody").append(str);
                            if(configVal.indexOf("\\|")){
                                if("show" == configVal.split("|")[1]){
                                    showQueryBox();
                                }
                            }
                        }
                        // alert("push前的：" + configId)
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }

                    if (configModelId == modelId && configType == 6) {
                        // console.log("++++++++" + connNames);
                        if(configName=='dbLinkName'){
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "连接名" +
                                '<span class="required"> * </span></label>' +
                                '<div class="input-group col-md-12">' +
                                '<div class="col-md-9" style="padding: 0 5px 0 15px;">' +
                                '<select  name="select" onchange="dbLinkNameChange($(this))" class="form-control form-dbLinkName" id="config'+configId+'" data-required="1" >' +
                                // '<option value="'+configVal+'">'+configVal+'</option>'+
                                options +
                                '</select></div>'+
                                '<div class="col-md-2" style="padding: 0"><span class="data-link-btn input-group-btn">' +
                                '<a data-toggle="modal" class="btn btn-default btnUrl btnTreeModal createLink" onclick="createNewLink()"  name="btnUrl" type="button" value="2"><span class="icon iconfont icon-jia4"></span></a></span>' +
                                // '<li data-toggle="modal" class="createLink">新建连接</li>' +
                                '</div></div></div>';
                            $("#formBody").append(str);
                            // configVal = connNames;
                            /**
                             *用户拖动后不选择连接名的情况
                             * @type {string}
                             */
                            $("#config" + configId).val("");
                            configVal = connNames + "|" + $("#config" + configId).val();
                        }
                        if(configName=='tableName'){
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "表名" +
                                '<span class="required"> * </span></label>' +
                                '<div class="input-group col-md-12">' +
                                '<div class="col-md-12">' +
                                '<select  name="select" class="form-control" id="config'+configId+'" data-required="1" >' +
                                // optionsTables +
                                '</select>' +
                                '</div></div>' +
                                '</div>';
                            $("#formBody").append(str);
                            configVal = "" + "|" + $("#config" + configId).val();
                        }

                        if(configName=='writeMode'){
                            // alert(configVal);
                            var op1=configVal.split(',')[0];
                            var op2=configVal.split(',')[1];
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "写入模式" +
                                '<span class="required"> * </span></label>' +
                                '<div class="input-group col-md-12">' +
                                '<div class="col-md-12">' +
                                '<select  name="select" class="form-control col-md-12" id="config'+configId+'" data-required="1" >' +
                                '<option value="'+op1+'">'+ "追加" +'</option>'+
                                '<option value="'+op2+'">'+ "覆盖" +'</option>'+
                                '</select>'+
                                '</div></div>' +
                                '</div>' +
                                '<div class="form-group formBox"><label class="control-label col-md-12 config-label" id="writeMode-instruction"></label>' +
                                '</div>';
                            $("#formBody").append(str);
                            //用户不点击overWrite模式的时候。
                            configVal = configVal + "|" +  $("#config" + configId).val();
                        }

                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    if (configModelId == modelId && configType == 4) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required" aria-required="true"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<div class="mt-radio-list" id="config'+configId+'" data-error-container="#form_2_membership_error">';
                        if (returndata.obj[i].mvalue == 1) {
                            str += '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="1" checked="true"> true' +
                                '<span></span></label>' +
                                '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="2"> false' +
                                '<span></span></label>';
                        }
                        else {
                            str += '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="1"> true' +
                                '<span></span></label>' +
                                '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="2" checked="true"> false' +
                                '<span></span></label>';
                        }
                        str += '</div><div id="form_2_membership_error"> </div>' +
                            '</div></div>';


                        $("#formBody").append(str);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    if (configModelId == modelId && configType == 9) {
                        var editPyRName="";
                        var boxName="";
                        if(configModelId==83){
                            editPyRName="编辑python脚本";
                            boxName="python(v4)"
                        }else{
                            editPyRName="编辑R脚本";
                            boxName="R(v4)"
                        }
                        var str = '<div class="form-group formBox">' +
                            '<div class="col-md-12">' +
                            '<a  class="editPyStyle" type="button" dataVal="'+configModelId+'">'+editPyRName+'</a>' +
                            // '<textarea  data-required="1"  style="height:200px;" class="form-control" id="'+configId+'"   >'+showVal+'</textarea></div>
                            '</div>';
                        $("#formBody").append(str);
                        $("#pyRTitle").html(boxName)
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }

                    // 提取列新增
                    if (configModelId == modelId && configType == 8) {
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            configName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<input type="hidden" data-required="1" class="form-control" id="'+configId+'" value="'+configVal+'" disabled="disabled"/>' +
                            '<div class="choice-column">111</div>'+
                            '</div>' +
                            '<div class="col-md-12">' +
                            '<button type="button" class="btn btn-default bg-color">选择标签列</button>' +
                            '</div>' +
                            '</div>';
                        $("#formBody").append(str);
                        configData.push({
                            configId: "config"+configId,
                            configVal: configVal,
                            configType: configType,
                            configName: configName
                        });
                    }
                    // end
                }
                configObj.push({
                    BlockName: html,
                    BlockBg: bgClass,
                    BlockId: id,
                    data: configData,
                    id: modelId,
                    trainedModelId:trainedModelId
                });
                console.log(configObj)
            }
            editConfigModel();
            editUrlConfigModel();
            console.log("gggggggggggggggg" + configObj);
        }
    });
}

//点击模块切换配置信息
function clickConfigModel() {
    $("#canvasBody").click(function (event) {
        // $('body').removeClass('page-quick-sidebar-open');
        event.stopPropagation();
        $(".page-quick-sidebar-wrapper").css({"z-index": -1})
    });
    $("#canvasBlock").on("click", ".box", function () {
        $(".page-quick-sidebar-wrapper").css("z-index", "2");
        $(".page-console").css("z-index", "1");
        var boxName = $(this).find("span.modelName").text();
        var modelInterface = $(this).nextUntil(".box");
        var modelList = $(".operatorBlock").find("h3.ui-draggable");
        for (var j = 0; j < modelList.length; j++) {
            if ($(modelList[j]).text() == boxName) {
                var configInfo = $(modelList[j]).siblings(".modelInfo").val();
            }
        }
        $("#modelInfo").html(configInfo);
        $(this).css("box-shadow", "2px 2px 19px #aaa");//选中效果
        $(this).siblings(".box").css("box-shadow", "2px 2px 19px rgba(9,84,109,0.1)");//选中效果
        $(this).css("z-index", "9");//选中层级提高
        modelInterface.css("z-index", "10");//选中层级提高
        $(this).siblings(".box").css("z-index", "0");
        $(".jtk-endpoint").not(modelInterface).css("z-index", "1");
        console.log(configObj);
        $('body').addClass('page-quick-sidebar-open');
        // $("#sp").text(boxName + "参数配置");
        $("#sp").text(boxName);
        $("#formBody").html("");
        var blockId = $(this).attr("id");
        $("#formBody").attr("name", blockId);
        var sampleVal = "";

        /**
         * 每次点击模型的时候，从数据库动态获取连接名展示在select框中，
         */
        // alert(1111)
        for (var i = 0; i < configObj.length; i++) {
            if (blockId == configObj[i].BlockId) {
                for (var k = 0; k < configObj[i].data.length; k++) {
                    var configType = configObj[i].data[k].configType;
                    var configVal = configObj[i].data[k].configVal;
                    var configId = configObj[i].data[k].configId;
                    var configName = configObj[i].data[k].configName;
                    var configSeletedValue = configObj[i].data[k].configSelectVal;
                    console.log(configObj[i].data.length);
                    if (configType == 0) {
                        var str = '<div class="form-group formBox formBoxHidden"><label class="control-label col-md-12 config-label">' +
                            configName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<input type="text" data-required="1" class="form-control" id="'+configId+'" value="'+configVal+'" disabled="disabled"/></div></div>';
                        $("#formBody").append(str);
                    }
                    if (configType == 1) {
                        var showVal = "";
                        if(configVal == null){
                            showVal = "";
                        }else{
                            showVal = configVal;
                        }
                        var showConfigName
                        if(configName == "sampleSize"){
                            showConfigName = sampleVal
                        }else{
                            showConfigName = configName;
                        }

                        ChineseConfigName = getChineseConfigName(showConfigName);
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<input type="text" data-required="1" class="form-control" id="'+configId+'" value="'+showVal+'" /></div></div>';
                        $("#formBody").append(str);
                    }
                    if (configType == 2) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        var configSelectVal = configObj[i].data[k].configSelectVal
                        var sampleTypeForChin;
                        if(configName == "sampleType"){
                            if(configSelectVal == "1"){
                                sampleVal = "sampleSize_Num"
                                sampleTypeForChin = getChineseConfigName("sampleSize_Num")
                                $(this).parents("#formBody").children().eq(1).find("label").html(sampleTypeForChin);
                            }else if(configSelectVal == "0"){
                                sampleVal = "sampleSize_Percent"
                                sampleTypeForChin = getChineseConfigName("sampleSize_Percent")
                                $(this).parents("#formBody").children().eq(1).find("label").html(sampleTypeForChin);
                            }
                        }
                        var selectConfigVal = configVal.split(",");
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<select class="form-control" id="'+configId+'" name="select">';
                        for (var j = 0; j < selectConfigVal.length; j++) {
                            if(configName == "sampleType"){
                                var ChineseSelectConfigVal = getSelectConfigValForChi(configName + "|" + selectConfigVal[j]);
                                str += '<option value="' + selectConfigVal[j] + '">' + ChineseSelectConfigVal + '</option>';
                            }else{
                                str += '<option value="' + selectConfigVal[j] + '">' + selectConfigVal[j] + '</option>';
                            }
                        }
                        str += '</select></div></div>';
                        $("#formBody").append(str);
                        $("#"+configId).val(configSelectVal);
                    }
                    if (configType == 3) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        console.log(configVal)
                        if(configVal!=undefined&&configVal!=""){
                            configVal ="/"+configVal.split("/")[configVal.split("/").length-2]+"/"+ configVal.split("/")[configVal.split("/").length-1];
                        }else {
                            configVal="";
                        }
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<div class="input-group">' +
                            '<input type="text" class="form-control" id="'+configId+'" data-required="1" value="'+configVal+'" title="'+configVal+'" disabled="disabled">' +
                            '<span class="input-group-btn">' +
                            '<a href="#basic" data-toggle="modal" class="btn btn-default btnUrl btnTreeModal" name="btnUrl" type="button" value="1"><i class="icon-doc"></i></a></span>' +
                            '</div></div></div>';
                        $("#formBody").append(str);
                    }
                    if (configType == 5) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        if(configVal!=undefined&&configVal!=""){
                            configVal ="/"+configVal.split("/")[configVal.split("/").length-2]+"/"+ configVal.split("/")[configVal.split("/").length-1];
                        }
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<div class="input-group">' +
                            '<input type="text" class="form-control" id="'+configId+'" data-required="1" value="'+configVal+'" title="'+configVal+'" disabled="disabled">' +
                            '<span class="input-group-btn">' +
                            '<a href="#basic" data-toggle="modal" class="btn btn-default btnUrl btnTreeModal" name="btnUrl" type="button" value="2"><i class="icon-doc"></i></a></span>' +
                            '</div></div></div>';
                        $("#formBody").append(str);
                    }

                    if (configType == 6) {
                        if(configName=='dbLinkName'){
                            $.ajax({
                                url:basePath+"/drag/modelattri/LoadEnableConnNames.do",
                                type: 'GET',
                                async: false,
                                contentType: "text",
                                success: function (data) {
                                    var selectedConnName = configVal.split("|")[1];
                                    configVal = data + "|" +  selectedConnName;
                                },
                                error: function () {
                                }
                            })
                            var splits = configVal.split("|");
                            var connNames = splits[0];
                            var selectedValue = splits[1];
                            // alert(selectedValue);
                            var optionValues = connNames.split(",");
                            var options = "";
                            for(var m=0; m<optionValues.length; m++){
                                //当用户Id没有连接名的时候，后台返回的数据可能为"",需要排除数据为""的情况。
                                if("" != optionValues[m]){
                                    var tableName = optionValues[m];
                                    if(optionValues[m].length> 11){
                                        tableName = tableName.substring(0,11)
                                    }
                                    options += '<option value="'+optionValues[m]+'" title="'+ optionValues[m] +'">'+ tableName +'</option>';
                                }
                            }
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "连接名" +
                                '<span class="required"> * </span></label>' +
                                '<div class="input-group col-md-12">' +
                                '<div class="col-md-9" style="padding: 0 5px 0 15px;">' +
                                '<select  name="select" class="form-control form-dbLinkName" onchange="dbLinkNameChange($(this))" id="'+configId+'" data-required="1" >' +
                                // '<option value="'+configVal+'">'+configVal+'</option>'+
                                options +
                                '</select></div>'+
                                '<div class="col-md-2" style="padding: 0"><span class="data-link-btn input-group-btn">' +
                                // '<a href="#dataLink" data-toggle="modal" class="btn btn-default btnUrl btnTreeModal" name="btnUrl" type="button" value="2"><i>新建连接</i></a></span>'
                                '<a data-toggle="modal" class="btn btn-default btnUrl btnTreeModal createLink" onclick="createNewLink()" name="btnUrl" type="button" value="2"><span class="icon iconfont icon-jia4"></span></a></span>'
                                // '<li data-toggle="modal" class="createLink">新建连接</li>' +
                            '</div></div></div>';
                            // alert(configId);
                            $("#formBody").append(str);
                            $("#" + configId).val(selectedValue);
                        }
                        if(configName=='tableName'){
                            var tableSelected = configVal.split("|")[1];
                            // alert()
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "表名" +
                                '<span class="required"> * </span></label>' +
                                '<div class="input-group col-md-12">' +
                                '<div class="col-md-12">' +
                                '<select name="select" class="form-control" id="'+configId+'" data-required="1" >' +
                                '</select>'+
                                '</div></div>' +
                                '</div>';
                            $("#formBody").append(str);
                            var tbSelected = $("#" + configId);
                            var dbLinkNameSelect = tbSelected.parent().parent().parent().prev().find(".form-control");
                            if(dbLinkNameSelect.length > 0){
                                var linkName = dbLinkNameSelect.val();
                                // alert(linkName)
                                $.ajax({
                                    url:basePath+"/drag/modelattri/loadTables.do",
                                    type:"POST",
                                    dataType:"json",
                                    data:"connName=" + linkName,
                                    success: function (data) {
                                        var tablesContainsTbselected = false;
                                        var options = "";
                                        $.each(data,function (index,value) {
                                            options += '<option value="'+value+'">'+ value +'</option>';
                                            if(value == tableSelected){
                                                tablesContainsTbselected = true;
                                            }
                                        })
                                        if(!tablesContainsTbselected){
                                            tableSelected = data[0];
                                        }
                                        tbSelected.append(options);
                                        tbSelected.val(tableSelected);
                                    },
                                    error: function () {
                                        // alert("连接错误，请重试！")
                                    }
                                })
                            }
                        }

                        if(configName=='writeMode'){
                            console.log(configVal);
                            var op1 = "";
                            var op2 = "";
                            var ModesSelected = "";
                            if(configVal.indexOf("|")){
                                var writeModes = configVal.split("|")[0];
                                ModesSelected = configVal.split("|")[1];
                                op1 = writeModes.split(",")[0];
                                op2 = writeModes.split(",")[1];
                            }else{
                                op1=configVal.split(',')[0];
                                op2=configVal.split(',')[1];
                            }
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "写入模式" +
                                '<span class="required"> * </span></label>' +
                                '<div class="input-group col-md-12">' +
                                '<div class="col-md-12">' +
                                '<select name="select" class="form-control col-md-12" id="'+configId+'" data-required="1" >' +
                                '<option value="'+op1+'">'+ "追加" +'</option>'+
                                '<option value="'+op2+'">'+ "覆盖" +'</option>'+
                                '</select>'+
                                '</div></div>' +
                                '<div class="form-group formBox"><label class="control-label col-md-12 config-label" id="writeMode-instruction"></label>' +
                                '</div>';
                                '</div>';
                            $("#formBody").append(str);
                            $("#" + configId).val(ModesSelected);
                            if(ModesSelected == "overwrite"){
                                $("#writeMode-instruction").html("<span class=\"required\" id=\"sqlStatment-notice\"> * </span>警告，覆盖模式将清空写入表格所有数据！");
                                $("#writeMode-notice").html(" * ");
                            }else if(ModesSelected == "append"){
                                $("#writeMode-instruction").html("");
                            }
                        }

                    }

                    if(configType == 7){
                        if(configName=='sqlStatment'){
                            var text = configVal.split("|")[0];
                            if(text == "null"){
                                text = "";
                            }
                            var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                                "SQL语句" +
                                '<span class="required"></span></label>' +
                                '<div class="col-md-12">' +
                                '<div class="input-group">' +
                                '<button class="form-control btn btn-sql" type="button" onclick="showQueryBox()">建立SQL查询</button></div>' +
                                '<div class="queryBox" style="display: none"><div class="input-group col-md-12">' +
                                '<textarea name="textarea" class="form-control col-md-12 textarea-sql" placeholder="请书写sql语句" data-required="1" class="form-control" id="'+configId+'">' + text + '</textarea></div>' +
                                '</div></div>' +
                                '<div class="form-group formBox"><label class="control-label col-md-12 config-label" id="sql-Check"></label></div>';
                            $("#formBody").append(str);
                            // alert(configVal)
                            if(configVal.indexOf("\\|")){
                                if("show" == configVal.split("|")[1]){
                                    showQueryBox();
                                }
                            }

                            if(configVal != null && configVal != ""){
                                var formatSql = configVal.split("|")[0].replace(/\s+/g, ",");
                                var words = formatSql.split(",");
                                for(var a=0; a<words.length; a++){
                                    if(words[a] == "from"){
                                        var selectedTable = getSelectedTableName(blockId);
                                        if(words[a+1] != selectedTable){
                                            $("#sql-Check").html("<span class=\"required\" id=\"sqlStatment-notice\"> * </span>sql语句查询的表名必须与所选表名一致!");
                                        }else{
                                            $("#sql-Check").html("");
                                        }
                                    }
                                }
                            }

                        }
                    }
                    if (configType == 4) {
                        var ChineseConfigName = getChineseConfigName(configName);
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            ChineseConfigName +
                            '<span class="required" aria-required="true"> * </span></label>' +
                            '<div class="col-md-12">' +
                            '<div class="mt-radio-list" id="'+configId+'" data-error-container="#form_2_membership_error">';
                        if (configVal == "true") {
                            str += '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="true" checked="true"> true' +
                                '<span></span></label>' +
                                '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="false"> false' +
                                '<span></span></label>';
                        }
                        else {
                            str += '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="true"> true' +
                                '<span></span></label>' +
                                '<label class="mt-radio">' +
                                '<input type="radio" name="membership" value="false" checked="true"> false' +
                                '<span></span></label>';
                        }
                        str += '</div><div id="form_2_membership_error"> </div>' +
                            '</div></div>';
                        $("#formBody").append(str);
                    }
                    if (configType == 9) {
                        var editPyRName="";
                       if(boxName=="python(V4)"){
                           editPyRName="编辑python脚本"
                       }else{
                           editPyRName="编辑R脚本"
                       }
                        var str = '<div class="form-group formBox">' +
                            '<div class="col-md-12">' +
                            '<a  class="editPyStyle" type="button" dataVal="'+boxName+'" blockId="'+blockId+'">'+editPyRName+'</a>' +
                            // '<textarea  data-required="1"  style="height:200px;" class="form-control" id="'+configId+'"   >'+showVal+'</textarea></div>
                            '</div>';
                        $("#formBody").append(str);
                        $("#pyRTitle").html(boxName)
                    }
                    // 四期提取列
                    if(configType==8){
                        var str = '<div class="form-group formBox"><label class="control-label col-md-12 config-label">' +
                            configName +
                            '<span class="required"> * </span></label>' +
                            '<div class="col-md-12">' +
                            // '<input type="text" data-required="1" class="form-control" id="'+configId+'" value="'+configVal+'" disabled="disabled"/>' +
                            '<div class="choice-column">111</div>'+
                            '</div>' +
                            '<div class="col-md-12">' +
                            '<button type="button" class="btn btn-default bg-color">选择标签列</button>' +
                            '</div>' +
                            '</div>';
                        $("#formBody").append(str);
                    }
                }
            }
        }
        editPyRNameModel();
        editConfigModel();
        editUrlConfigModel();
        return false;
    });
}
function editPyRNameModel() {
    var boxName;
    var blockId
    $("#formBody").on("click", "a.editPyStyle", function () {
        boxName=$(this).attr("dataVal");
        blockId=$(this).attr("blockId")
        for (var i = 0; i < configObj.length; i++){
            if (configObj[i].BlockId == blockId) {
                $('#textareaPyR').val(configObj[i].data[0].configVal)
            }
        }
        $("#pyRModal").modal("show");
    })
    $("#surePyR").on('click',function () {
        for (var i = 0; i < configObj.length; i++){
            if (configObj[i].BlockId == blockId) {
                configObj[i].data[0].configVal=$('#textareaPyR').val()
            }
        }
        $("#pyRModal").modal("hide");
    })
}
//function fileInputInit() {
//    $("span[class='input-group-btn']").on('click',function () {
//        var inputLabel = $(this).closest('div').find('input');
//        var changedId = $(this).closest('input').attr('id');
//        var blockId = $(this).parents('#formBody').attr('name');
//    });
//}
//修改hdfs地址配置参数
function editUrlConfigModel() {
    var urlInput;
    var urlInputId;
    var urlInputVal;
    var blockId;
    $("#formBody").on("click", "a.btnUrl", function () {
        urlInput = $(this).parent().siblings("input");
        urlInputId = urlInput.attr("id");
        blockId = $(this).parents("#formBody").attr("name");
        //
        $("#treeBtn").click(function () {
            blockId = $("#formBody").attr("name");
            var url= $('.jstree-clicked').closest('li').attr('file-url');
           // var url1 = url.split("/")[url.split("/").length-2,url.split("/").length-1];
            var url1 ="/"+url.split("/")[url.split("/").length-2]+"/"+ url.split("/")[url.split("/").length-1];
            // alert("qqqqqqqqqqqq" + url)
            var urlInputUser="/"+url.substring(url.indexOf("user"),url.length);

            // alert("sdjsjjda"+urlInputUser)
            console.log(urlInputUser+"----------------------------88888888")
            console.log(url1+"----------------------------9999999999999")
            urlInput.val(url1);
            urlInputVal = urlInput.val();

            for (var i = 0; i < configObj.length; i++){
                if (configObj[i].BlockId == blockId) {
                    for (var k = 0; k < configObj[i].data.length; k++) {
                        if (configObj[i].data[k].configId == urlInputId) {
                            configObj[i].data[k].configVal = urlInputUser;
                        }
                    }
                }
            }
            $("#basic").modal("hide");
        });
    });
}

//修改其他配置信息
function editConfigModel() {
    $("#formBody").find("input, select, textarea").on("change keyup",function () {
        var changedId;
        var changedVal;
        var changedType = $(this).attr("type");
        var changedName = $(this).attr("name");
        var blockId = $(this).parents("#formBody").attr("name");
        changedVal = $(this).val();

        var optionValues =  $(this).children("option").map(function () {
            return $(this).val();
        }).get().join(",");
        // var selectChangedVal = $(this).find("option:selected").text();;
        // alert("sssssss" + selectChangedVal)
        if (changedType == "radio") {
            changedId = $(this).parents("div.mt-radio-list").attr("id");
        }
        else {
            changedId = $(this).attr("id");
        }

        for (var i = 0; i < configObj.length; i++){
            if (configObj[i].BlockId == blockId) {
                for (var k = 0; k < configObj[i].data.length; k++) {
                    if (configObj[i].data[k].configId == changedId) {
                        if (changedName == "select") {
                            if(configObj[i].data[k].configType == 2){
                                configObj[i].data[k].configSelectVal = changedVal;
                                var sampleTypeForChin;
                                if(changedVal == "0" && configObj[i].data[k].configName == "sampleType"){
                                    sampleTypeForChin = getChineseConfigName("sampleSize_Percent")
                                    $(this).parents("#formBody").children().eq(1).find("label").html(sampleTypeForChin);
                                }else if(changedVal == "1" && configObj[i].data[k].configName == "sampleType"){
                                    sampleTypeForChin = getChineseConfigName("sampleSize_Num")
                                    $(this).parents("#formBody").children().eq(1).find("label").html(sampleTypeForChin);
                                }
                                // var configNameForChin = getChineseConfigName(changedVal)

                            }else{
                                configObj[i].data[k].configVal = optionValues + "|" + changedVal;
                                //当切换表名时，更新sqlStatment表名验证。
                                if(configObj[i].data[k].configName == "tableName"){
                                    var sqlStatment = getSqlStatment(blockId);
                                    if(sqlStatment != null && sqlStatment != ""){
                                        var formatSql = sqlStatment.replace(/\s+/g, ",");
                                        var words = formatSql.split(",");
                                        for(var a=0; a<words.length; a++){
                                            if(words[a] == "from"){
                                                if(words[a+1] != changedVal){
                                                    $("#sql-Check").html("<span class=\"required\" id=\"sqlStatment-notice\"> * </span>sql语句查询的表名必须与所选表名一致!");
                                                }else{
                                                    $("#sql-Check").html("");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //写入数据库算子界面，选择writeMode时，给出提醒消息。
                            if(changedVal == "overwrite"){
                                $("#writeMode-instruction").html("<span class=\"required\" id=\"sqlStatment-notice\"> * </span>警告，覆盖模式将清空写入表格所有数据！");
                                $("#writeMode-notice").html(" * ");
                            }else if(changedVal == "append"){
                                $("#writeMode-instruction").html("");
                            }
                        }else if(changedName == "textarea"){
                            if(changedVal == ""){
                                changedVal = "null";
                            }
                            configObj[i].data[k].configVal = changedVal + "|" +  showQueryFlag;
                            if(changedVal != null && changedVal!= "null" && changedVal != "" && configObj[i].data[k].configName == "sqlStatment"){
                                var formatSql = changedVal.replace(/\s+/g, ",");
                                var words = formatSql.split(",");
                                for(var a=0; a<words.length; a++){
                                    if(words[a] == "from"){
                                        var selectedTable = getSelectedTableName(blockId);
                                        if(words[a+1] != selectedTable){
                                            $("#sql-Check").html("<span class=\"required\" id=\"sqlStatment-notice\"> * </span>sql语句查询的表名必须与所选表名一致!");
                                        }else{
                                            $("#sql-Check").html("");
                                        }
                                    }
                                }
                            }else{
                                $("#sql-Check").html("");
                            }
                        }
                        else {
                            if(changedVal == ""){
                                changedVal = "null";
                            }
                            configObj[i].data[k].configVal = changedVal;
                        }
                    }
                }
            }
        }
    });
}


//放大、缩小模块
window.setZoom = function(zoom, instance, transformOrigin, el) {
    transformOrigin = transformOrigin || [ 0.5, 0.5 ];
    instance = instance || jsPlumb;
    el = el || instance.getContainer();
    var p = [ "webkit", "moz", "ms", "o" ],
        s = "scale(" + zoom + ")",
        oString = (transformOrigin[0] * 100) + "% " + (transformOrigin[1] * 100) + "%";

    for (var i = 0; i < p.length; i++) {
        el.style[p[i] + "Transform"] = s;
        el.style[p[i] + "TransformOrigin"] = oString;
    }

    el.style["transform"] = s;
    el.style["transformOrigin"] = oString;

    instance.setZoom(zoom);
    instance.repaintEverything();

};
var zoomScale = 1;
//使用按钮进行缩放
function zoomPlus() {
    $("#zoomPlus").click(function () {
        if (zoomScale < 1.4) {
            zoomScale += 0.1;
            setZoom(zoomScale);
        }
    });
    $(document).keyup(function (e) {
        var key =  e.which;
        if(key == 187){
            if (zoomScale < 1.4) {
                zoomScale += 0.1;
                setZoom(zoomScale);
            }
        }
    });
}
function zoomMinus() {
    $("#zoomMinus").click(function () {
        if (zoomScale > 0.7) {
            zoomScale = zoomScale - 0.1;
            setZoom(zoomScale);
        }
    });
    $(document).keyup(function (e) {
        var key =  e.which;
        if(key == 189){
            if (zoomScale > 0.7) {
                zoomScale = zoomScale - 0.1;
                setZoom(zoomScale);
            }
        }
    });
}
function zoomNormal() {
    $("#zoomNormal").click(function () {
        zoomScale = 1;
        setZoom(zoomScale);
    });
    $(document).keyup(function (e) {
        var key =  e.which;
        if(key == 48){
            zoomScale = 1;
            setZoom(zoomScale);
        }
    });
}
// 新增网格是否显示
function zoomGrid() {
    var k=true;
    $('#zoomGrid').click(function () {
        if(k){
            $('.portlet.light #canvasBody').css({"background":"#ecf0f1"});
            k=false;
        }else{
            $('.portlet.light #canvasBody').css({"background":"#ecf0f1 url('../../content/images/global/bg_grid.png') repeat"});
            k=true;
        }

    })
}
//新增网格是否显示end
// 全屏
function zoomFull() {
    var k=true;
    $('#zoomFull').click(function () {
        if(k){
            $('.canvasMain .operatorBlock').addClass('dn');
            $('.canvasMain .operatorMessage').addClass('dn');
            $('.operatorTitle').css({'width':'100%'});
            $('.canvasMain .canvasBlock').css({'width':'100%'})
            k=false;
        }else {
            $('.canvasMain .operatorBlock').removeClass('dn');
            $('.canvasMain .operatorMessage').removeClass('dn');
            $('.operatorTitle').css({'width':'84%'});
            $('.canvasMain .canvasBlock').css({'width':'80%'});
            k=true;
        }
    })
}
//全屏end

//使用鼠标滚轮进行缩放
//$("#canvasBody").on("mousewheel DOMMouseScroll", function (e) {
//
//    var delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1)) ||  // chrome & ie
//        (e.originalEvent.detail && (e.originalEvent.detail > 0 ? -1 : 1));              // firefox
//
//    if (delta > 0 && zoomScale < 1.6) {
//        // 向上滚
//        zoomScale += 0.05;
//        setZoom(zoomScale);
//    } else if (delta < 0 && zoomScale > 0.6) {
//        // 向下滚
//        zoomScale = zoomScale - 0.05;
//        setZoom(zoomScale);
//    }
//});

//开启、关闭控制台-
function openConsole() {
    $("#iconInfo").click(function () {
        $(".page-console").addClass("page-console-open");
    });
}
function closeConsole() {
    $("#closeConsole").click(function () {
        $(".page-console").removeClass("page-console-open");
    });
}

//显示和关闭sql查询box
function showQueryBox() {
    if($('.queryBox').css("display") == 'none' ) {
        $('.queryBox').show();
        // alert($('.queryBox').attr("id"));
        showQueryFlag = "show"
    }
    // }else {
    //     $('.queryBox').css("display","none")
    //     showQueryFlag = "hide";
    // }

    var blockId = $('.queryBox').parents("#formBody").attr("name");
    var configId = $('.queryBox').find("textarea").attr("id");
    for (var i = 0; i < configObj.length; i++){
        if (configObj[i].BlockId == blockId) {
            for (var k = 0; k < configObj[i].data.length; k++) {
                if (configObj[i].data[k].configId == configId) {
                    var configVal = configObj[i].data[k].configVal;
                    configObj[i].data[k].configVal = configVal.split("|")[0] + "|" + showQueryFlag;
                    // alert(configObj[i].data[k].configVal);
                }
            }
        }
    }
}
//显示和关闭临时工作流
function showDropDown() {
    if($('#sessionMessage').css("display") == 'none' ){
        $(".detailsName p i").removeClass("icon-xia").addClass("icon-shang");
        $('#sessionMessage').show();
        showQueryFlag = 1;
    }else {
        $(".detailsName p i").removeClass("icon-shang").addClass("icon-xia");
        $('#sessionMessage').css("display","none")
    }
}

//查看工作流全局配置信息
function viewAllConfigs() {
    $("#iconConfig").click(function () {
        var allConfigsStr = '<div class="mt-element-list">';
        for (var i = 0; i < configObj.length; i++) {
            allConfigsStr += '<div class="mt-list-head list-simple font-white ' + configObj[i].BlockBg + '">'
                + '<div class="list-head-title-container"><h4 class="list-title">' + configObj[i].BlockName +'</h4></div></div>'
                + '<div class="mt-list-container list-simple"><ul>';
            for (var k = 0; k < configObj[i].data.length; k++) {
                //判断特殊的配置信息
                var configVal = configObj[i].data[k].configVal;
                if(configObj[i].data[k].configName == "dbLinkName" || configObj[i].data[k].configName == "tableName" || configObj[i].data[k].configName == "writeMode"){
                    configVal = configObj[i].data[k].configVal.split("|")[1];
                }else if(configObj[i].data[k].configName == "sqlStatment"){
                    configVal = configObj[i].data[k].configVal.split("|")[0];
                }else{
                    configVal = configObj[i].data[k].configVal;
                }

                allConfigsStr += '<li class="mt-list-item"><div class="list-item-content">'
                    + '<h5><a href="javascript:;">'
                    + configObj[i].data[k].configName
                    + '：</a>'
                    // + configObj[i].data[k].configVal
                    + configVal
                    + '</h5></div></li>';
            }
            allConfigsStr += '</ul></div>';
        }
        allConfigsStr += '</div>';
        $("#basicConfigInfo").find(".form-body").html(allConfigsStr);
        $("#basicConfigInfo").modal();
    })
}

//拖动画布事件
function draggableCanvas() {
    var mouseX;
    var mouseY;
    var muoseD;
    var canvasBody = $("#canvasBody");
    var canvasBlock = $("#canvasBlock");
    var blockLeft;
    var blockTop;
    canvasBody.mousedown(function (e) {
        muoseD = true;
        mouseX = e.pageX;
        mouseY = e.pageY;
        blockLeft = canvasBlock.css("left");
        blockTop = canvasBlock.css("top");
        console.log(blockLeft, blockTop);
        $(document).mousemove(function(e){
            if (muoseD) {
                canvasBlock.css("left", parseInt(blockLeft) + (e.pageX - mouseX) + "px");
                canvasBlock.css("top", parseInt(blockTop) + (e.pageY - mouseY) + "px");
            }
        });
    });
    $(document).mouseup(function(e){
        muoseD = false;
    });
}

//鼠标右键点击算子弹出菜单
//function rightClickModel() {
//    $("#canvasBlock").on("mousedown", ".box", function (e) {
//        if (e.which == 3) {
//            $(this).bind("contextmenu",function(e){
//                return false;
//            });
//            var menuStr = '<div class="dropdown inline clearfix">'
//                        + '<ul class="dropdown-menu" role="menu">'
//                        + '<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:;">设置标签</a></li>'
//                        + '<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:;">删除算子</a></li>'
//        }
//    })
//}
// 提取列方法
function choiceTag() {
    $(".operatorMessage").on("click","#choice-tag",function () {
        $("#tag-modal").modal("show");
        $(".choice-column-right .mCSB_container").empty();
        $(".tag-already p").each(function () {
            // tagArray.push($(this).text());
            $(".choice-column-right .mCSB_container").append('<p>'+$(this).text()+'</p>');
        })
    });
    $("#tagSave").on("click",function () {
        $(".tag-already .mCSB_container").empty();
        var tagArray=[];
        $(".choice-column-right p").each(function () {
            // tagArray.push($(this).text());
            $(".tag-already .mCSB_container").append('<p>'+$(this).text()+'</p>');
        });
        $("#tag-modal").modal("hide");
    });
    // 可选择的方法
    $("#tag-modal").on("click",".choice-column p span i.icon-jia1",function () {
        if ($(this).parents("p").hasClass("all")){
            var tagArray=[];
            $(".choice-column-left p").not(".all").each(function () {
                tagArray.push($(this).parents("p").text());
                $(this).parents("p").remove();
                $(".choice-column-right .mCSB_container").append($(this));
            });
        }else {
            $(this).parents("p").remove();
            $(".choice-column-right .mCSB_container").append('<p>'+$(this).parents("p").text()+'<span><i class="icon iconfont icon-jian"></i></span></p>');
        }

    });
    // 已选择删除方法
    $("#tag-modal").on("click",".choice-column p span i.icon-jian",function () {
        if ($(this).parents("p").hasClass("all")){
            var tagArray=[];
            $(".choice-column-right p").not(".all").each(function () {
                tagArray.push($(this).parents("p").text());
                $(this).parents("p").remove();
                $(".choice-column-left .mCSB_container").append($(this));
            });
        }else {
            $(this).parents("p").remove();
            $(".choice-column-left .mCSB_container").append('<p>'+$(this).parents("p").text()+'<span><i class="icon iconfont icon-jia1"></i></span></p>');
        }
    });
}
// 提取列end
$(function(){
    $("#canvasBlock").on("mouseover", ".box", function () {
        $(this).tooltip({
            trigger:'hover',
            placement:'right',
            html: true
        });
    });
    //设置滚动条样式
    var height = $(".page-content").css("height");
    var boxHeight = parseInt(height)-100;
    var canvasHeight = parseInt(height);
    var configHeight = parseInt($(".page-quick-sidebar-wrapper").css("height"));
    $("#canvasBody").css("height", canvasHeight-50);
    $(".operatorMessage").css("height", canvasHeight);
    $('#modelList').slimScroll({
        color: '#1bbc9b',
        railColor: '#eee',
        size: '5px',
        height: boxHeight + 'px',
        alwaysVisible: false,
        disableFadeOut: true,
        wheelStep: 10
    });
    $('#wellConsole').slimScroll({
        color: '#1bbc9b',
        railColor: '#eee',
        size: '5px',
        height: 180 ,
        alwaysVisible: false,
        disableFadeOut: true,
        wheelStep: 10
    });
    $('.table-scrollable').slimScroll({
        color: '#1bbc9b',
        railColor: '#eee',
        size: '5px',
        height: 180 ,
        alwaysVisible: false,
        disableFadeOut: true,
        wheelStep: 10
    });
    $('.page-quick-sidebar').slimScroll({
        color: '#1bbc9b',
        railColor: '#eee',
        size: '5px',
        height: configHeight + "px" ,
        alwaysVisible: false,
        disableFadeOut: true,
        wheelStep: 10
    });
    $('#canvasBody').slimScroll({
        color: '#1bbc9b',
        railColor: '#eee',
        size: '5px',
        height: canvasHeight - 50 + "px" ,
        alwaysVisible: true,
        disableFadeOut: false,
        wheelStep: 5,
        borderRadius: "7px!important"
    });
    $(".dragList").find("h3").draggable({
        drag: draggingModel,
        helper: draggingModel,
        scope: "ss"
    });
    $("#workspace").addClass('active open');
    $("#canvasBody").droppable({
        scope: "ss",
        drop: createNode
    });
    removeModel();
    $("#formInput").change(function () {
        filterModel();
    });
    //切换控制台和配置项的层级
    //$("#iconInfo").click(function () {
    //    $(".page-console").css("z-index", "9999");
    //    $(".page-quick-sidebar-wrapper").css("z-index", "9996");
    //});
    $(".page-console, #iconInfo").click(function () {
        $(".page-console").css("z-index", "2");
        $(".page-quick-sidebar-wrapper").css("z-index", "-1");
    });
    $(".page-quick-sidebar-wrapper").click(function () {
        $(this).css("z-index", "2");
        $(".page-console").css("z-index", "1");
    });
    // ============添加注释切换事件
    $('#canvasBody').on('click','.menuColorList div',function(){
        var bg=$(this).attr('bgcolor');
        $(this).parent().prev().find(".menuColorfather").css("background",bg);//变背景色
        $(this).parent().parent().parent().next().css("background",bg);
    });
    $('#canvasBody').on('click','.menuColorList div',function(){
        var bg=$(this).attr('bgcolor');
        $(this).parent().prev().find(".menuColorfather").css("background",bg);//变背景色
        $(this).parent().parent().parent().next().css("background",bg);
    });
    //对齐颜色
    $('#canvasBody').on('click','.noteMenuAlign .align1',function(){
        $(this).css("color","#1bbc9b");
        $(this).next().css("color","#000000");
        $(this).next().next().css("color","#000000");
        $(this).parent().parent().next().css("text-align","left");
    });
    $('#canvasBody').on('click','.noteMenuAlign .align2',function(){
        $(this).prev().css("color","#000000");
        $(this).css("color","#1bbc9b");
        $(this).next().css("color","#000000");
        $(this).parent().parent().next().css("text-align","center");
    });
    $('#canvasBody').on('click','.noteMenuAlign .align3',function(){
        $(this).prev().prev().css("color","#000000");
        $(this).prev().css("color","#000000");
        $(this).css("color","#1bbc9b");
        $(this).parent().parent().next().css("text-align","right");
    });
    //删除标签
    $('#canvasBody').on('click','.menuDelete',function(){
        $(this).parent().parent().parent().remove();
    });
    $("#canvasBody").on("blur",'.noteTextarea',function(){
        $(this).next().show();
        $(this).css("border","none");
        $(this).next().css("top","0px");
        $(this).prev().hide();
    });

    $("#canvasBody").on("dblclick",'.noteInput',function(){
        $(this).hide();
        $(this).prev().focus();
        $(this).prev().css("border","1px solid #f89415");
        $(this).prev().prev().show();
    });
    $("#canvasBody").on("blur",'.noteInput',function(){
        $(this).prev().prev().show();
    });

    $("#canvasBody").on('click','.menuColorDiv',function(){
        console.log($(this));
        if($(this).parent().find(".menuColorList").hasClass("show")){
            $(this).find(".selectColor").empty();
            $(this).find(".selectColor").append("<i class=' iconfont icon-shang2'></i>");
            $(this).parent().find(".menuColorList").hide().removeClass("show");

        }else {
            $(this).find(".selectColor").empty();
            $(this).find(".selectColor").append("<i class=' iconfont icon-xia1'></i>")
            $(this).parent().find(".menuColorList").show().addClass("show");
        }
    });
    // ================添加注释切换事件end

    //configModel();
    initFloderConstruct();
    openConsole();
    closeConsole();
    zoomMinus();
    zoomPlus();
    zoomNormal();
    zoomGrid();
    zoomFull();
    draggableCanvas();
    clickConfigModel();
    editConfigModel();
    setTimeout(reload, 100);
    setTags();
    viewAllConfigs();
    choiceTag();
    //rightClickModel();
    console.log(configObj);
    // onloadType();
});

// 新增本地存储
// 通过获取本页面url
$(document).ready(function(){
    // 获取当前的时间年月日
    var url=window.location.href;
    function GetQueryString(name){
        var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if(r!=null)return  decodeURI(r[2]); return null;
    }
    var name=GetQueryString('name'),
        flowId=GetQueryString('flowId');
    var message={flowId:flowId,name:name,url:url};
    var m=JSON.parse(sessionStorage.getItem("data"));
    console.log(m);
    var str="";
    if(m!=null||m!=undefined){
        var n;
        for(var i=0;i<m.length;i++){
            console.log("sdhjk"+flowId);
            console.log("xoxodoososo"+m[i].flowId);
            if(m[i].flowId!=flowId){
                n=true;
            }else {
                // delete m[i];
                n=false;
                break;
            }
        }
        console.log(n);
        if (n==true){
            if(m.length==20){
                m.shift()
            }
            m.push(message);
            sessionStorage.setItem('data',JSON.stringify(m));
            console.log(m);
        }
        console.log('11111')

        m.forEach(function (element, index, array) {
           if(element['flowId']==flowId) {
               array.splice(index, 1);
           }
        });

        console.log(m)

        for(var i=0;i<m.length;i++){
            str+='<li><a href="'+m[i].url+'"><i class="glyphicon"></i><span>'+m[i].name+'</span></a><i class="glyphicon glyphicon-remove" onclick="deleteTempWorkStream('+m[i].flowId+',this)"></i></li>';

        }

        console.log(name);

        $('#sessionMessage').html('<li class="sessionCheck"><a href="'+url+'"><i class="glyphicon glyphicon-ok"></i><span>'+name+'</span></a></li>'+str);

        // 判断页面上面缓存是否有相同的flowid，有相同的去掉下面的li（明天来做）

    }else{
        var data=[];
        data.push(message);

        sessionStorage.setItem('data',JSON.stringify(data));
        console.log(data);
        $('#sessionMessage').html('<li class="sessionCheck"><a href="'+url+'"><i class="glyphicon glyphicon-ok"></i><span>'+name+'</span></a></li>');
    }


});
//删除临时工作流
function deleteTempWorkStream(flowId,obj) {
    var data=JSON.parse(sessionStorage.getItem('data'));
    data.forEach(function (element, index, array) {
        if(element['flowId']==parseInt(flowId)) {
            array.splice(index, 1);
        }
    });
    $(obj).parent().remove()
    sessionStorage.setItem('data',JSON.stringify(data));
}

//设置读取数据库算子连接名拖拽下拉框的切换监听

function dbLinkNameChange(selectEle){
    var connName = selectEle.val();
    var tableSelect = selectEle.parent().parent().parent().next().find(".form-control");
    var blockId = selectEle.parents("#formBody").attr("name");
    // alert("blockId:" + blockId);
    var tableConfigId = tableSelect.attr("id");
    tableSelect.empty();
    //每次求换前将tableName的值置为空。
    for (var i = 0; i < configObj.length; i++){
        if (configObj[i].BlockId == blockId) {
            for (var k = 0; k < configObj[i].data.length; k++) {
                if (configObj[i].data[k].configId == tableConfigId) {
                    configObj[i].data[k].configVal = "null" + "|" + "null";
                }
            }
        }
    }
    $.ajax({
        url:basePath+"/drag/modelattri/loadTables.do",
        type:"POST",
        dataType:"json",
        data:"connName=" + connName,

        success: function (data) {
            // 针对用户只切换连接名的select框而不切换表名的select框时，将不会触发表名的onchange方法，
            // 这是将表名select框的第一个option值作为默认选择的option保存在configVal中。
            var options = "";
            var tables = "";
            $.each(data,function (index,value) {
                options += '<option value="'+value+'">'+ value +'</option>';
                tables += value + ",";
            })
            var formatTables = tables.substring(0,tables.length-1);
            tableSelect.append(options);

            // 切换连接名时，更新sqlStatment验证。
            var sqlStatment = getSqlStatment(blockId);
            if(sqlStatment != null && sqlStatment != ""){
                var formatSql = sqlStatment.replace(/\s+/g, ",");
                var words = formatSql.split(",");
                for(var a=0; a<words.length; a++){
                    if(words[a] == "from"){
                        if(words[a+1] != data[0]){
                            $("#sql-Check").html("<span class=\"required\" id=\"sqlStatment-notice\"> * </span>sql语句查询的表名必须与所选表名一致!");
                        }else{
                            $("#sql-Check").html("");
                        }
                    }
                }
            }

            for (var i = 0; i < configObj.length; i++){
                if (configObj[i].BlockId == blockId) {
                    for (var k = 0; k < configObj[i].data.length; k++) {
                        if (configObj[i].data[k].configId == tableConfigId) {
                            // configObj[i].data[k].configVal = configObj[i].data[k].configVal.split("|")[0] + "|" + data[0];
                            configObj[i].data[k].configVal = formatTables + "|" + data[0];
                        }
                    }
                }
            }
        },
        error: function () {
            // alert("连接错误，请重试！")
        }
    })
}


/**
 * 数据库新建连接的业务逻辑
 */
function createNewLink() {
    $("#dataLink").modal("show");
}

/**
 * 数据库连接测试
 * @constructor
 */
//用一个全局变量来保存ta_exception标签的状态。
var allowShowTestResult = true;
function LinkDataBaseTest(){
    allowShowTestResult = true;
    $("#connect_test").attr("disabled",true);
    $("#la_errorinfo").html("");
    var type = $.trim($("#resource_type").val());
    var databaseName = $.trim($("#resource_databaseName").val());
    var hostIp = $.trim($("#resource_hostIp").val());
    var port = $.trim($("#resource_port").val());
    var userName = $.trim($("#resource_username").val());
    var passWord = $.trim($("#resource_password").val());
    var connectNmae = $.trim($("#resource_linkname").val());
    var textarea = $("#ta_exception");
    textarea.html("");
    var config = {
        'type':type,
        'databaseName':databaseName,
        'hostIp':hostIp,
        'hostPort':port,
        'userName':userName,
        'passWord':passWord,
        'connectNmae':connectNmae
    };

    console.log(basePath+"/drag/ReadResource/linktest.do");
    console.log(config);
    $.ajax({
        url:basePath+"/drag/ReadResource/linktest.do",
        type: 'POST',
        data:config,
        async: true,
        contentType: "application/x-www-form-urlencoded; charset=utf-8",
        // contentType:"text",
        beforeSend:function () {
            $('#ta_prepare').show();
        },
        success:function(data){
            $('#ta_prepare').hide();
            console.log(data);
            if(data.indexOf("失败")!=-1){
                if(allowShowTestResult){
                    textarea.html("<span class='font-orange'>"+data+"</span>");
                    // textarea.val("未知错误！");
                }
            }else {
                if(allowShowTestResult){
                    textarea.html("<span class='font-color'>"+data+"</span>");
                    // textarea.val(data);
                }
                // console.log("连接成功！" == data);
            }
            $("#connect_test").attr("disabled",false);
        },
        error:function(){
            console.log("回传数据失败！")
            if(true){
                textarea.html("<span class='font-orange'>未知错误!</span>");
            }
            // textarea.val("未知错误！");
            // $("#connect_save").attr("disabled", true);
            $("#connect_test").attr("disabled",false);
        }
    })
}


function closeform() {
    $("#parame_form")[0].reset();
    $("#ta_exception").empty();
    $(".linkNameError").remove();
    $(".linkDataBaseError").remove();
    $(".hostIpError").remove();
    $(".portError").remove();
    $(".userNameError").remove();
    $(".passwordError").remove();
    $("#connect_test").attr("disabled",false);
    $('#ta_prepare').hide();
    allowShowTestResult = false;
}

function cancleLink() {
    $("#parame_form")[0].reset();
    $("#ta_exception").empty();
    $(".linkNameError").remove();
    $(".linkDataBaseError").remove();
    $(".hostIpError").remove();
    $(".portError").remove();
    $(".userNameError").remove();
    $(".passwordError").remove();
    $("#connect_test").attr("disabled",false);
    $('#ta_prepare').hide();
    allowShowTestResult = false;
}



function saveLink(){
    var newConnName = $("#resource_linkname").val();
    var value = $("#connect_save").val();
    var type = $("#resource_type").val();
    var databaseName = $("#resource_databaseName").val();
    var hostIp = $("#resource_hostIp").val();
    var port = $("#resource_port").val();
    var userName = $("#resource_username").val();
    var passWord = $("#resource_password").val();

    var checkFunc = [checkLinkName, checkDataBaseName, checkHostIp, checkPort, checkUserName, checkPassword];
    var result = checkFunc.every(function (item, index, array) {
        return item();
    });

    var config = {
        'type':type,
        'databaseName':databaseName,
        'hostIp':hostIp,
        'hostPort':port,
        'userName':userName,
        'passWord':passWord,
        'connectNmae':newConnName
    };
    //新建连接时要添加的select的option。
    var newConnOption = '<option value="'+newConnName+'">'+ newConnName +'</option>';
    var connNames = "";
    // var configId;
    // var tableSelect;
    // var newTableOption;
    $.ajax({
        url: basePath + "/drag/modelattri/savelink.do",
        type: 'POST',
        dataType: "json",
        data: config,
        success: function (data) {
            //数据库名下拉框
            if(data.code == 200){
                if(data.msg == ""){
                    for (var i = 0; i < configObj.length; i++){
                        for (var k = 0; k < configObj[i].data.length; k++) {
                            if(configObj[i].data[k].configName.trim() == "dbLinkName"){
                                var oldConfigVal = configObj[i].data[k].configVal;
                                // alert("oldConfigVal" + oldConfigVal);
                                connNames = oldConfigVal.split("|")[0];
                                // alert("connNames" + connNames);
                                var selectedLink = oldConfigVal.split("|")[1];
                                // alert("selectedLink" + selectedLink);
                                //对于新建连接前用户目录下已经存在连接名的情况，将新的连接名添加到老的连接名里面，设置select的选择值为新建连接前的选择值。
                                configObj[i].data[k].configVal = connNames + "," + newConnName + "|" + selectedLink;
                                configId = configObj[i].data[k].configId;
                            }
                        }
                    }
                    $("#" + configId).append(newConnOption);

                    for (var i = 0; i < configObj.length; i++){
                        for (var k = 0; k < configObj[i].data.length; k++) {
                            if(configObj[i].data[k].configName.trim() == "dbLinkName"){
                                var oldConfigVal = configObj[i].data[k].configVal;
                                // alert("oldConfigVal" + oldConfigVal);
                                connNames = oldConfigVal.split("|")[0];
                                // alert("connNames" + connNames);
                                var selectedLink = oldConfigVal.split("|")[1];
                                var configId = configObj[i].data[k].configId;
                                // alert("selectedLink" + selectedLink);
                                //对于新建连接前用户目录下已经存在连接名的情况，将新的连接名添加到老的连接名里面，设置select的选择值为新建连接前的选择值。
                                // configObj[i].data[k].configVal = connNames + "," + newConnName + "|" + selectedLink;
                                // configId = configObj[i].data[k].configId;
                                $("#" + configId).val(selectedLink);
                            }
                        }
                    }
                    //将增加的连接名加在当前的select框里面,1)当用户id空间里面还没有建立数据库连接时，
                    // 将新建的连接名默认选中，并加载表的下拉框默认选中第一个。
                    //2)当用户保存后刷新进入算子页面，并且该连接名已经从数据库中删除了，而且此时连接名为空时，加载下拉框默认选中第一个。
                    // tableSelect = $("#" + configId).parent().parent().parent().next().find(".form-control");

                    // alert("connNames   " + connNames);
                    //新建连接前用户目录下一个连接名也没有的情况下，将新建的连接名作为用户选中的连接名，将新建连接下第一个表作为默认选中的表。
                    // if(connNames == ""){
                    //     // alert(newConnOption);
                    //     $("#" + configId).val(newConnName);
                    //     $.ajax({
                    //         url: basePath + "/drag/modelattri/loadTables.do",
                    //         type: 'POST',
                    //         dataType: "json",
                    //         data: "connName=" + newConnName,
                    //         success: function (data) {
                    //             for(var i = 0; i < data.length; i++){
                    //                 newTableOption += '<option value="'+ data[i]+'">'+ data[i] +'</option>';
                    //             }
                    //             tableSelect.append(newTableOption);
                    //             tableSelect.val(data[0]);
                    //             // alert("长度:" + $("#" + configId).length);
                    //             // alert("第一个长度:" + $("#" + configId + " " + "option:first").val());
                    //             for (var i = 0; i < configObj.length; i++){
                    //                 for (var k = 0; k < configObj[i].data.length; k++) {
                    //                     //将新建的连接名作为默认选中的连接名。
                    //                     if(configObj[i].data[k].configName.trim() == "dbLinkName"){
                    //                         configObj[i].data[k].configVal = newConnName + "|" + newConnName;
                    //                     }
                    //                     //将新建的连接名下的第一个表作为默认选中的表。
                    //                     if(configObj[i].data[k].configName.trim() == "tableName"){
                    //                         configObj[i].data[k].configVal = data[0] + "|" + data[0];
                    //                     }
                    //                 }
                    //             }
                    //         },
                    //         error: function () {
                    //             $("#la_errorinfo").html("保存失败，请重试！");
                    //         }
                    //     })
                    // }
                    cancleLink();
                    $("#dataLink").modal('hide');
                }else{
                    $("#la_errorinfo").html(data.msg);
                }
            }
        },
        error: function () {
            $("#la_errorinfo").html("保存失败，请重试！");
        }
    })
}

$(function () {
    connetSocket();
//        $("#workFlowName").tooltip();
});



function FileLabel(file) {
    this._file = file;
}
FileLabel.prototype = {};
FileLabel.prototype.create = function () {
//        var file = this._file;
//        var isDir = file.isdir;
//        var fileSize = file.size;
//
//        if(isDir && fileSize != 0){
//            var $li = $("<li>"+file.fileName+"</li>");
//
//            var $li_default = $("<li>空</li>");
//            $li.append($ul.append($li_default));
//        }
//        else if (isDir){
//            var $li = $("<li data-jstree={ 'type' : 'folder' }>"+file.fileName+"</li>");
//
//        }
//        else{
//            var $li = $("<li data-jstree={ 'type' : 'file' }>"+file.fileName+"</li>");
//        }
    var $li = $("<li>"+file.name+"</li>");
    $li.attr("data-jstree", "{ 'type' : 'file' }");
    return $li ;
};


function ifRun() {
    $.get(basePath + "/drag/calculation/showHistory.do", function (result) {
        var result = JSON.parse(result);
        if(result.length > 0){
            connetSocket();
            $("#iconInfo").click();
            showCalculationHistory(result);
        }
    });
}

function bindRun() {
    $(".icon-control-play").bind('click', function () {
        connetSocket();
        var result =  $.get(basePath + "/drag/calculation/run.do");
        $(this).removeAttr('click');
        result.success(function (data) {
            var data = JSON.parse(data);
            if(data.code=='417'){
                alert("运行失败");
                return;
            }else  if(data.code == '409'){
                alert(data.msg);
                return;
            }

            $("#iconInfo").click();
            showCalculationHistory(data.obj);
        });
    });
}


function showCalculationHistory(data) {
    $("#calculationHistory-content").html('');
    $("#calculationHistory").tmpl(data).appendTo('#calculationHistory-content');
}

var runningState=false;
function connetSocket() {
    var websocket = null;
    if (window['WebSocket'])
        websocket = new WebSocket("ws://" + window.location.host + PATH + '/websocket.do');
    else
        websocket = new new SockJS(PATH + '/websocket/socketjs');

    websocket.onopen = function(event) {
        console.log('open', event);
    };
    websocket.onmessage = function(event) {

        var result = JSON.parse(event.data);
        console.log(result.jobId+"^^^^^^^^"+$("#jobId").val())
        if(result.jobId == $("#jobId").val()){
            // console.log("resultresultresult:"+event.data);
            $("div[ role='progressbar']").width(result.progressStatus);
            $("#progress-bar").html(result.progressStatus);
            $("#wellConsole").html(result.consoleMsg);

            var data = result.consoleMsg;
            console.log(data);
            if(data.indexOf("fail") > 0 ){
                runningState=false;
                $("#running").html("<span style='color: #f82b2b' >失败<span>")
            }

            var datas=data.split("<p");
            for(var i=0;i<datas.length;i++){
                if(datas.length>2) {
                    for (var j = 0; j < configObj.length; j++) {
                        if(i+2<datas.length){
                        if (datas[i + 2].indexOf(""+configObj[j].BlockId+"") > 0 && datas[i + 2].indexOf("运行成功") > 0) {
                            $("#"+configObj[j].BlockId+" .boxBody").removeClass("fail-type run-type");
                            var n=$("#"+configObj[j].BlockId+" .boxBody").hasClass("success-type");
                            if(!n){
                                $("#"+configObj[j].BlockId+" .boxBody").addClass("success-type");
                            }
                            console.log("-----------------------------" + configObj[j].BlockName + ":运行成功 ---------------------------");
                            // break;
                        } else if (datas[i + 2].indexOf(""+configObj[j].BlockId+"") > 0 && datas[i + 2].indexOf("运行出错") > 0) {
                            $("#"+configObj[j].BlockId+" .boxBody").removeClass("success-type run-type");
                            var n=$("#"+configObj[j].BlockId+" .boxBody").hasClass("fail-type");
                            if(!n){
                                $("#"+configObj[j].BlockId+" .boxBody").addClass("fail-type");
                            }
                            console.log("------------------------------" + configObj[j].BlockName + ":运行出错 ----------------------------");
                            // break;
                        } else  if (datas[i + 2].indexOf(""+configObj[j].BlockId+"") > 0 && datas[i + 2].indexOf("开始启动") > 0) {
                            $("#"+configObj[j].BlockId+" .boxBody").removeClass("success-type fail-type");
                            var n=$("#"+configObj[j].BlockId+" .boxBody").hasClass("run-type");
                            if(!n){
                                $("#"+configObj[j].BlockId+" .boxBody").addClass("run-type");
                            }
                            runningState=true;
                            console.log("------------------------------" + configObj[j].BlockName + ":运行中... ----------------------------");
                            // break;
                        }
                        }
                    }
                }
            }
            // alert(result.consoleMsg);
            // alert(result.progressStatus);
            if(result.progressStatus == "100%" ){
                runningState=false;
                $("#running").html("成功")
            }
        }
    };
}
//    成功、失败状态数组
var allType=[];
var success=[];
var fail=[];
function onloadType() {
    var actionInfo=actionsType;
    var actiondatas=actionInfo.split("/");
    var workFlow = JSON.parse($("#returnData").text());
    var obj=JSON.parse(workFlow.models);
    for(var i=0;i<actiondatas.length;i++){
        var datas=actiondatas[i].split(":");
        for(var j=0;j<obj.length;j++){
            if(datas[0]==obj[j].BlockId){
//                ERROR  OK
                if(datas[1]=="ERROR"){
                    fail.push(datas[0]);
                    allType.push(datas[0]);
                }else if(datas[1]=="OK"){
                    success.push(datas[0]);
                    allType.push(datas[0]);
                }
            }
        }
    }
    console.log("success+"+success);
    console.log("fail+"+fail);
    $.each(success,function (i,value) {
        $("#"+value+" .boxBody").addClass("success-type");
    });
    $.each(fail,function (i,value) {
        $("#"+value+" .boxBody").addClass("fail-type");
    })
}


function getChineseConfigName(configName,configId){
    var configNameForChin = "";
    if(configName == "labelColumn"){
        configNameForChin = "标签列";
    }else if(configName == "numClasses"){
        configNameForChin = "分类个数";
    }else if(configName == "numTrees"){
        configNameForChin = "树模型个数";
    }else if(configName == "maxDepth"){
        configNameForChin = "树模型最大深度";
    }else if(configName == "lambda"){
        configNameForChin = "平滑因子";
    }else if(configName == "maxIterations"){
        configNameForChin = "最大迭代数";
    }else if(configName == "weight"){
        configNameForChin = "权重";
    }else if(configName == "initMode"){
        configNameForChin = "初始模式";
    }else if(configName == "convergenceTol"){
        configNameForChin = "似然函数收敛阈值";
    }else if(configName == "minSupport"){
        configNameForChin = "最小支持度";
    }else if(configName == "minConfidence"){
        configNameForChin = "最小置信度";
    }else if(configName == "k"){
        configNameForChin = "类别个数";
    }else if(configName == "CustomName"){
        configNameForChin = "定义模型名称";
    }else if(configName == "CustomModelDescription"){
        configNameForChin = "定义模型描述";
    }else if(configName == "numIterations"){
        configNameForChin = "迭代次数";
    }else if(configName == "runs"){
        configNameForChin = "运行次数";
    }else if(configName == "fileFormat"){
        configNameForChin = "文件格式";
    }else if(configName == "delimiter"){
        configNameForChin = "分隔符";
    }else if(configName == "charSet"){
        configNameForChin = "编码"
    }else if(configName == "header"){
        configNameForChin = "表头"
    }else if(configName == "inputPath"){
        configNameForChin = "输入路径"
    }else if(configName == "outputPath"){
        configNameForChin = "输出路径"
    }else if(configName == "sampleType"){
        configNameForChin = "采样类型"
    }else if(configName == "sampleSize_Num"){
        configNameForChin = "采样个数"
    }else if(configName == "sampleSize_Percent"){
        configNameForChin = "采样比例"
    }else if(configName == "reIndex"){
        configNameForChin = "生成新索引  "
    }else if(configName == "centroids"){
    configNameForChin = "分类中心点数";
    }else{
        configNameForChin = configName;
    }
    return configNameForChin;
}


function getSelectConfigValForChi(selectConfigVal){
    var selectConfigValForChi;
    if(selectConfigVal.toLowerCase() == "sampletype|0"){
        selectConfigValForChi = "按比例采样"
    }else if(selectConfigVal.toLowerCase() == "sampletype|1"){
        selectConfigValForChi = "按绝对数量采样"
    }else{
        selectConfigValForChi = selectConfigVal.split("\\|")[1]
    }
    return selectConfigValForChi
}

function getLinkNames(){
    var linkNames = "";
    $.ajax({
        url:basePath+"/drag/modelattri/LoadConnNames.do",
        type: 'GET',
        async: false,
        contentType: "text",
        success:function(data){
           linkNames = data;
        },
    })
    // alert(linkNames);
    return linkNames;
}

function getSelectedTableName(blockId){
    var selectedTableName = "";
    for (var i = 0; i < configObj.length; i++){
        if(configObj[i].BlockId == blockId){
            for (var k = 0; k < configObj[i].data.length; k++) {
                if(configObj[i].data[k].configName.trim() == "tableName"){
                    selectedTableName = configObj[i].data[k].configVal.split("|")[1];
                    return selectedTableName;
                }
            }
        }
    }
}

function  getSqlStatment(blockId) {
    var sqlStatment = "";
    for (var i = 0; i < configObj.length; i++){
        if(configObj[i].BlockId == blockId){
            for (var k = 0; k < configObj[i].data.length; k++) {
                if(configObj[i].data[k].configName.trim() == "sqlStatment"){
                    sqlStatment = configObj[i].data[k].configVal.split("|")[0];
                    return sqlStatment;
                }
            }
        }
    }
}


//检验连接名字
function checkLinkName() {
    var databaseName = $.trim($("#resource_linkname").val());
    if(databaseName.length>20){
        $(".linkNameError").remove();
        $("#resource_linkname").after('<p class="linkNameError font-orange linkError">·&nbsp;连接名不能超过20个字！</p>')
        return false
    }else {
        var connNames=getLinkNames();
        // var connNames=JSON.parse(linkNameInfo)['connNames'];
        var connNamesList=connNames.split(',');
        var databaseName = $.trim($("#resource_linkname").val());
        if(databaseName){
            if(connNamesList && Array.isArray(connNamesList)){
                var flag=false;
                connNamesList.forEach(function (item, index, array) {
                    if(databaseName == item){
                        flag=true;
                    }
                });
                if(flag){
                    $(".linkNameError").remove();
                    $("#resource_linkname").after('<p class="linkNameError font-orange linkError">·&nbsp;连接名重复了！</p>')
                    return false;
                }else {
                    $(".linkNameError").remove();
                    return true;
                }
            }
        }else {
            $(".linkNameError").remove();
            $("#resource_linkname").after('<p class="linkNameError font-orange linkError">·&nbsp;不能为空哦！</p>');
            return false;
        }
    }





}

//检验数据库名称
function checkDataBaseName() {
    var resource_databaseName = $.trim($("#resource_databaseName").val());
    if(!resource_databaseName){
        $('.linkDataBaseError').remove();
        $("#resource_databaseName").after('<p class="linkDataBaseError font-orange linkError">·&nbsp;不能为空哦！</p>')
        return false
    }else if(resource_databaseName.length>50) {
        $(".linkDataBaseError").remove();
        $("#resource_databaseName").after('<p class="linkDataBaseError font-orange linkError">·&nbsp;数据库名不能超过20个字！</p>')
        return false
    }else {
        $('.linkDataBaseError').remove();
        return true
    }
}

//检验主机
function checkHostIp() {
    var resource_hostIp = $.trim($("#resource_hostIp").val());
    var reg = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/
    if(resource_hostIp){
        if(reg.test(resource_hostIp)){
            $(".hostIpError").remove();
            return true
        }else {
            $(".hostIpError").remove();
            $("#resource_hostIp").after('<p class="hostIpError font-orange linkError">·&nbsp;IP书写格式错误！</p>')
            return false;
        }
    }else {
        $(".hostIpError").remove();
        $("#resource_hostIp").after('<p class="hostIpError font-orange linkError">·&nbsp;不能为空哦！</p>')
        return false;
    }
}

//检验端口号
function checkPort() {
    var resource_port = $.trim($("#resource_port").val());
    if(resource_port){
        if (/^[0-9]{1,5}$/g.test(resource_port) && parseInt(resource_port)<65535 && parseInt(resource_port)>0){
            $(".portError").remove();
            return true
        }else {
            $(".portError").remove();
            $("#resource_port").after('<p class="portError font-orange linkError">·&nbsp;端口号格式错误！</p>');
            return false;
        }
    }else {
        $(".portError").remove();
        $("#resource_port").after('<p class="portError font-orange linkError">·&nbsp;不能为空哦！</p>');
        return false;
    }
}

//检验用户名
function checkUserName() {
    var resource_username = $.trim($("#resource_username").val());
    if(!resource_username){
        $('.userNameError').remove();
        $("#resource_username").after('<p class="userNameError font-orange linkError">·&nbsp;不能为空哦！</p>')
        return false
    }else if(resource_username.length>50){
        $(".userNameError").remove();
        $("#resource_username").after('<p class="userNameError font-orange linkError">·&nbsp;用户名不能超过50个字！</p>')
        return false
    }else{
        $('.userNameError').remove();
        return true
    }
}

//校验密码
function checkPassword() {
    var resource_password = $.trim($("#resource_password").val());
    if(!resource_password){
        $('.passwordError').remove();
        $("#resource_password").after('<p class="passwordError font-orange linkError">·&nbsp;不能为空哦！</p>')
        return false
    }else if(resource_password.length>20){
        $(".passwordError").remove();
        $("#resource_password").after('<p class="passwordError font-orange linkError">·&nbsp;密码不能超过20个字！</p>')
        return false
    }else {
        $('.passwordError').remove();
        return true
    }
}


$('#dataLink').on('hidden.bs.modal', function (e) {
    // do something...
    $(".linkError").remove();
})

// 新增算子右键功能
// 屏蔽浏览器右键功能
document.oncontextmenu=function () {
    return false;
};
// 算子绑定右键功能
$("#canvasBlock").on('contextmenu','.box',function (e) {
    console.log($(this).parent())
    var modelId=$(this).find('input').val();
    e.stopPropagation();
    $('#paste').hide();
    $('#field-des').hide();
    $('#save-model').hide();
    $('#copy').show();
    //添加字段描述的判断
    if(modelId==1||modelId==53||modelId==56){
        $('#field-des').show();
    }
    $('#deleteLi').show();
    var key = e.which;
    if(key == 3) {
        var x = e.clientX;
        var y = e.clientY;
        $("#right_menu").css({left:x,top:y,display:'block'});
        var modelId=$(this).find('input').val();
        var blockId = $(this).attr("id");
        $('#right_menu').attr('blockId',blockId);
        $('#right_menu').attr('data-val',modelId);
        $('#right_menu').attr('CopyModelId',blockId);
        $('#right_menu').attr('blockHtml',$(this).next().prop("outerHTML"));
        var existSuccess=$(this).find('div').hasClass("success-type");//存在跑通过成功没
        var existFail=$(this).find('div').hasClass("fail-type");//存在通跑过失败没

        //查看日志的判断，如果算子正在运行中，就不能查看日志
        if(runningState==true){
            $('#lookLogResult').hide();
            $('#save-model').hide();
            $('#lookDataResult').hide();
        }else {
            //查看数据的判断
            if(existSuccess==true) {
                $('#lookDataResult').show();
                //下面判断是不是要保存的模型-------------需要对接
                // if (modelId == 7 || modelId == 13 || modelId == 14 || modelId == 15 || modelId == 9 || modelId == 35 || modelId == 33 || modelId == 34 || modelId == 36 || modelId == 37 || modelId == 38 || modelId == 39 || modelId == 45 || modelId == 36 || modelId == 37 || modelId == 59 || modelId == 60 || modelId == 61 || modelId == 62 || modelId == 63 || modelId == 64 || modelId == 65 || modelId == 66 || modelId == 67 || modelId == 68 || modelId == 69 || modelId == 70 || modelId == 71 || modelId == 72 || modelId == 73 || modelId == 74 || modelId == 75 || modelId == 76 || modelId == 77 || modelId == 78 || modelId == 79 || modelId == 80 || modelId == 81) {
                //     $('#save-model').show();//保存好训练模型的li显示
                // } else {
                //     $('#save-model').hide();
                // }
                eachModels(modelId)

            }else {
                $('#lookDataResult').hide();
                $('#save-model').hide();
            }
            if(existSuccess==true||existFail==true){

                $('#lookLogResult').show();
            }else {
                $('#lookLogResult').hide();
            }
        }




    }
    return false;
});
//判断保存模型的算子有哪些
function eachModels(modelId) {
    var models=[7,13,14,15,9,35,33,34,36,37,38,39,45,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81];
    for(var i=0;i<models.length;i++){
        if(models[i]==modelId){
            $('#save-model').show();
        }
    }

}
//右击注释功能
$("#canvasBlock").on('contextmenu','.noteDiv',function (e) {
    e.stopPropagation();
    $('#lookDataResult').hide();
    $('#lookLogResult').hide();
    $('#save-model').hide();
    $('#field-des').hide();
    $('#copy').show();
    $('#paste').show();
    $('#deleteLi').show();
    var key = e.which;
    if(key == 3) {
        var x = e.clientX;
        var y = e.clientY;
        $("#right_menu").css({left:x,top:y,display:'block'});
        var noteId=$(this).attr('id')
        $('#right_menu').attr('CopyModelId',noteId);

    }
    return false;
});
//
var copyHtml='';
var blocksCopy = [];
var notesCopy=[];
var k = 0;
//右键复制功能
$('#copy').on('click',function () {
    copyHtml=$(this).parents('ul').attr('CopyModelId');
})
//右键粘贴
$('#paste').on('click',function (event) {
    blocksCopy.splice(0,blocksCopy.length);//清空数组
    $(".box").each(function (idx, elem) {
        var $elem = $(elem);
        var name = $elem[0].dataset.nodename;
        var fontClass = $elem.find(".myicon")[0].classList[2];
        var fontIconClass = $elem.find(".fa")[0].classList[1];
        blocksCopy.push({
            BlockId: $elem.attr('id'),
            BlockContent: $elem.find(".boxBody").text().replace(/\s/g, ""),
            BlockX: parseInt($elem.css("left"), 10),
            BlockY: parseInt($elem.css("top"), 10),
            BlockBorClass: $elem[0].classList[1],
            BlockBgClass: $elem[0].classList[2],
            BlockFontClass: fontClass,
            BlockFontIconClass: fontIconClass,
            Name: name
        });
    });
    notesCopy.splice(0,notesCopy.length);//清空数组
    $(".noteDiv").each(function (idx, elem) {
        var $elem = $(elem);
        console.log($elem);
        notesCopy.push({
            NoteId:$elem.attr('id'),
            NoteContent: $elem.find(".noteTextarea").val(),
            NoteX: parseInt($elem.css("left"), 10),
            NoteY: parseInt($elem.css("top"), 10),
            NoteBgColor:  $elem.find(".noteTextarea").css("background-color"),
            NoteTextAlign: $elem.find(".noteTextarea").css("text-align")
        });
    });
    var left = event.clientX-$('#canvasBody').offset().left;
    var top = event.clientY-$('#canvasBody').offset().top;
    var model = copyHtml.substring(0,5);
    //粘贴是算子还是注释
    if(model=="state"){
        if(blocksCopy.length > 0){
            for(i = 0; i < blocksCopy.length; i++){
                if(blocksCopy[i].BlockId==copyHtml) {
                    createNode1(event,blocksCopy[i],left,top);
                }
            }

        }
    }else {
        if(notesCopy.length > 0){
            for(i = 0; i < notesCopy.length; i++){
                if(notesCopy[i].NoteId==copyHtml) {
                    var noteId = $("div.noteDiv:last").attr("id");
                    var noteId1;
                    if (noteId) {
                        var lastIdNum = parseInt(noteId.substring(6));
                         k = lastIdNum;
                         k++;
                        noteId1="noteId"+k;
                        createNoteWrite(event,notesCopy[i],left,top,noteId1);
                    }

                }
            }

        }
    }


    console.log(copyHtml);

})

//删除
$('#deleteLi').on('click',function (e) {
    copyHtml=$(this).parents('ul').attr('CopyModelId');
    var model = copyHtml.substring(0,5);
    //删除是算子还是注释
    if(model=="state"){
        for (var i = 0; i < configObj.length; i++) {
            if (configObj[i].BlockId == copyHtml) {
                configObj.splice(i,1);
            }
        }
        var conn = $("#"+copyHtml);
        jsPlumb.remove(conn);
        $('body').removeClass('page-quick-sidebar-open');
    }else{
      $("#"+copyHtml).remove()
    }


    $("#right_menu").hide()
    return false;
});
$(document).on('click',function (e) {
    e.stopPropagation();
    $("#right_menu").css({display:'none'})
});
// 动态描述字段
function fieldDes() {
    $("#changeType").modal('toggle')
}
$('#field-des').on('click',function () {
    var modelId=$(this).parents('ul').attr('data-val');
    var blockId=$(this).parents('ul').attr('blockid');
    if(field.length>0){
        if(modelId==1){
            var m=true;
            for(var i=0;i<field.length;i++){
                // console.log(field);
                var index = i;
                if(field[index].type=='csv'&&field[index].blockId==blockId){
                    console.log(i);
                    var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                    str+='<tbody>';
                    for(var j=0;j<field[i].data.length;j++){
                        str+='<tr>' +
                            '<td><span class="syl">'+field[i].data[j][0]+'</span></td>' +
                            '<td>' +
                            '<span class="choose-type">' +
                            '<span class="syl">'+field[i].data[j][1]+'</span>' +
                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                            '</span>' +
                            '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                            '</td>' +
                            '<td><span class="syl">'+field[i].data[j][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                            '<td>' +
                            '<span class="choose-type">' +
                            '<span class="syl">'+field[i].data[j][3]+'</span>' +
                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                            '</span>' +
                            '<ul class="dn"><li>是</li><li>否</li></ul>' +
                            '</td>' +
                            '</tr>'
                    }
                    str+='</tbody>';
                    $('#changeType table').html(str);
                    $('#changeType').attr('type','csv');
                    $('#changeType').attr('blockId',blockId);
                    fieldDes();

                    m=true;
                    return m;
                }else {
                    m=false;
                }
            }
            if(m==false){
                for (var i=0;i<configObj.length; i++){
                    if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
                        var dataParF=[];
                        for (var j=0;j<configObj[i].data.length;j++){
                            var configType = configObj[i].data[j].configType;
                            var configName=configObj[i].data[j].configName;
                            var url = configObj[i].data[j].configVal;
                            if(configType==3&&url!=""){
                                // 截取路径
                                var url1 ="/"+url.split("/")[url.split("/").length-2]+"/"+ url.split("/")[url.split("/").length-1];
                                console.log(url1);
                                dataParF.push(url1);
                            }
                        }
                        if(dataParF.length<1){
                            alert('请先选择路径');
                        }else {
                            $.ajax({
                                url:basePath+"/drag/flow/adddescription4csv.do",
                                type: 'get',
                                data: {inputPath: dataParF[0],tableHeader:false},
                                dataType: "json",
                                success: function (data) {
                                    var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                                    str+='<tbody>';
                                    for(var i=0;i<data.length;i++){
                                        str+='<tr>' +
                                            '<td><span class="syl">'+data[i][0]+'</span></td>' +
                                            '<td>' +
                                            '<span class="choose-type">' +
                                            '<span class="syl">'+data[i][1]+'</span>' +
                                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                                            '</span>' +
                                            '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                                            '</td>' +
                                            '<td><span class="syl">'+data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                                            '<td>' +
                                            '<span class="choose-type">' +
                                            '<span class="syl">'+data[i][3]+'</span>' +
                                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                                            '</span>' +
                                            '<ul class="dn"><li>是</li><li>否</li></ul>' +
                                            '</td>' +
                                            '</tr>'
                                    }
                                    str+='</tbody>';
                                    $('#changeType table').html(str);
                                    $('#changeType').attr('type','csv');
                                }
                            });
                            fieldDes();
                        }
                        $('#changeType').attr('blockId',blockId);
                    }
                }
            }
        }else if(modelId==53){
            var m=true;
            for(var i=0;i<field.length;i++){
                if(field[i].type=='database'&&field[i].blockId==blockId){
                    var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                    str+='<tbody>';
                    for(var i=0;i<field[i].data.length;i++){
                        str+='<tr>' +
                            '<td><span class="syl">'+field[i].data[i][0]+'</span></td>' +
                            '<td>' +
                            '<span class="choose-type">' +
                            '<span class="syl">'+field[i].data[i][1]+'</span>' +
                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                            '</span>' +
                            '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                            '</td>' +
                            '<td><span class="syl">'+field[i].data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                            '<td>' +
                            '<span class="choose-type">' +
                            '<span class="syl">'+field[i].data[i][3]+'</span>' +
                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                            '</span>' +
                            '<ul class="dn"><li>是</li><li>否</li></ul>' +
                            '</td>' +
                            '</tr>'
                    }
                    str+='</tbody>';
                    $('#changeType table').html(str);
                    $('#changeType').attr('type','database');
                    fieldDes();
                    $('#changeType').attr('blockId',blockId);
                    m=true;
                    return m;
                }else {
                    m=false;
                }
            }
            if(m==false){
                for (var i=0;i<configObj.length; i++){
                    if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
                        var dataParT=[];
                        for (var j=0;j<configObj[i].data.length;j++){
                            var configType = configObj[i].data[j].configType;
                            var configName=configObj[i].data[j].configName;
                            var url = configObj[i].data[j].configVal;
                            if(configType==6){
                                var splits = url.split("|");
                                var splits = splits[1];
                                dataParT.push(splits);
                            }
                        }
                        if(dataParT.length<2||dataParT[0]=="null"||dataParT[1]=="null"){
                            alert('请先选择路径');
                        }else {
                            $.ajax({
                                url:basePath+"/drag/flow/adddescription4database.do",
                                type: 'get',
                                data: {connectName: dataParT[0],tableName:dataParT[1]},
                                dataType: "json",
                                success: function (data) {
                                    var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                                    str+='<tbody>';
                                    for(var i=0;i<data.length;i++){
                                        str+='<tr>' +
                                            '<td><span class="syl">'+data[i][0]+'</span></td>' +
                                            '<td>' +
                                            '<span class="choose-type">' +
                                            '<span class="syl">'+data[i][1]+'</span>' +
                                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                                            '</span>' +
                                            '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                                            '</td>' +
                                            '<td><span class="syl">'+data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                                            '<td>' +
                                            '<span class="choose-type">' +
                                            '<span class="syl">'+data[i][3]+'</span>' +
                                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                                            '</span>' +
                                            '<ul class="dn"><li>是</li><li>否</li></ul>' +
                                            '</td>' +
                                            '</tr>'
                                    }
                                    str+='</tbody>';
                                    $('#changeType table').html(str);
                                    $('#changeType').attr('type','database');
                                }
                            });
                            fieldDes();
                        }
                        $('#changeType').attr('blockId',blockId);
                    }
                }
            }
        }else if(modelId==56){
            var m=true;
            for(var i=0;i<field.length;i++){
                // console.log(field);
                var index = i;
                if(field[index].type=='csv'&&field[index].blockId==blockId){
                    console.log(i);
                    var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                    str+='<tbody>';
                    for(var j=0;j<field[i].data.length;j++){
                        str+='<tr>' +
                            '<td><span class="syl">'+field[i].data[j][0]+'</span></td>' +
                            '<td>' +
                            '<span class="choose-type">' +
                            '<span class="syl">'+field[i].data[j][1]+'</span>' +
                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                            '</span>' +
                            '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                            '</td>' +
                            '<td><span class="syl">'+field[i].data[j][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                            '<td>' +
                            '<span class="choose-type">' +
                            '<span class="syl">'+field[i].data[j][3]+'</span>' +
                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                            '</span>' +
                            '<ul class="dn"><li>是</li><li>否</li></ul>' +
                            '</td>' +
                            '</tr>'
                    }
                    str+='</tbody>';
                    $('#changeType table').html(str);
                    $('#changeType').attr('type','csv');
                    $('#changeType').attr('blockId',blockId);
                    fieldDes();

                    m=true;
                    return m;
                }else {
                    m=false;
                }
            }
            if(m==false){
                for (var i=0;i<configObj.length; i++){
                    if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
                        var dataParF=[];
                        for (var j=0;j<configObj[i].data.length;j++){
                            var configType = configObj[i].data[j].configType;
                            var configName=configObj[i].data[j].configName;
                            var url = configObj[i].data[j].configVal;
                            if(configType==3&&url!=""){
                                // 截取路径
                                var url1 ="/"+url.split("/")[url.split("/").length-2]+"/"+ url.split("/")[url.split("/").length-1];
                                console.log(url1);
                                dataParF.push(url1);
                            }
                        }
                        if(dataParF.length<1){
                            alert('请先选择路径');
                        }else {
                            $.ajax({
                                url:basePath+"/drag/flow/adddescription4csv.do",
                                type: 'get',
                                data: {inputPath: dataParF[0],tableHeader:false},
                                dataType: "json",
                                success: function (data) {
                                    var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                                    str+='<tbody>';
                                    for(var i=0;i<data.length;i++){
                                        str+='<tr>' +
                                            '<td><span class="syl">'+data[i][0]+'</span></td>' +
                                            '<td>' +
                                            '<span class="choose-type">' +
                                            '<span class="syl">'+data[i][1]+'</span>' +
                                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                                            '</span>' +
                                            '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                                            '</td>' +
                                            '<td><span class="syl">'+data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                                            '<td>' +
                                            '<span class="choose-type">' +
                                            '<span class="syl">'+data[i][3]+'</span>' +
                                            '<i class="icon iconfont icon-yousanjiao"></i>' +
                                            '</span>' +
                                            '<ul class="dn"><li>是</li><li>否</li></ul>' +
                                            '</td>' +
                                            '</tr>'
                                    }
                                    str+='</tbody>';
                                    $('#changeType table').html(str);
                                    $('#changeType').attr('type','csv');
                                }
                            });
                            fieldDes();
                        }
                        $('#changeType').attr('blockId',blockId);
                    }
                }
            }
        }
    }else{
        if(modelId==1){
            for (var i=0;i<configObj.length; i++){
                if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
                    var dataParF=[];
                    for (var j=0;j<configObj[i].data.length;j++){
                        var configType = configObj[i].data[j].configType;
                        var configName=configObj[i].data[j].configName;
                        var url = configObj[i].data[j].configVal;
                        if(configType==3){
                            if (url==""){
                                break;
                            }else {
                                // 截取路径
                                var url1 ="/"+url.split("/")[url.split("/").length-2]+"/"+ url.split("/")[url.split("/").length-1];
                                console.log(url1);
                                dataParF.push(url1);
                            }

                        }
                    }
                    if(dataParF.length<1){
                        alert('请先选择路径');
                    }else {
                        $.ajax({
                            url:basePath+"/drag/flow/adddescription4csv.do",
                            type: 'get',
                            data: {inputPath: dataParF[0],tableHeader:false},
                            dataType: "json",
                            success: function (data) {
                                var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                                str+='<tbody>';
                                for(var i=0;i<data.length;i++){
                                    str+='<tr>' +
                                        '<td><span class="syl">'+data[i][0]+'</span></td>' +
                                        '<td>' +
                                        '<span class="choose-type">' +
                                        '<span class="syl">'+data[i][1]+'</span>' +
                                        '<i class="icon iconfont icon-yousanjiao"></i>' +
                                        '</span>' +
                                        '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                                        '</td>' +
                                        '<td><span class="syl">'+data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                                        '<td>' +
                                        '<span class="choose-type">' +
                                        '<span class="syl">'+data[i][3]+'</span>' +
                                        '<i class="icon iconfont icon-yousanjiao"></i>' +
                                        '</span>' +
                                        '<ul class="dn"><li>是</li><li>否</li></ul>' +
                                        '</td>' +
                                        '</tr>'
                                }
                                str+='</tbody>';
                                $('#changeType table').html(str);
                                $('#changeType').attr('type','csv');
                            }
                        });
                        fieldDes();
                    }
                    $('#changeType').attr('blockId',blockId);
                }
            }
        }else if(modelId==53){
            for (var i=0;i<configObj.length; i++){
                if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
                    var dataParT=[];
                    for (var j=0;j<configObj[i].data.length;j++){
                        var configType = configObj[i].data[j].configType;
                        var configName=configObj[i].data[j].configName;
                        var url = configObj[i].data[j].configVal;
                        if(configType==6){
                            if(url==""){
                                break;
                            }else{
                                var splits = url.split("|");
                                var splits = splits[1];
                                dataParT.push(splits);
                            }

                        }
                    }
                    if(dataParT.length<2||dataParT[0]=="null"||dataParT[1]=="null"){
                        alert('请先选择路径');
                    }else {
                        $.ajax({
                            url:basePath+"/drag/flow/adddescription4database.do",
                            type: 'get',
                            data: {connectName: dataParT[0],tableName:dataParT[1]},
                            dataType: "json",
                            success: function (data) {
                                var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                                str+='<tbody>';
                                for(var i=0;i<data.length;i++){
                                    str+='<tr>' +
                                        '<td><span class="syl">'+data[i][0]+'</span></td>' +
                                        '<td>' +
                                        '<span class="choose-type">' +
                                        '<span class="syl">'+data[i][1]+'</span>' +
                                        '<i class="icon iconfont icon-yousanjiao"></i>' +
                                        '</span>' +
                                        '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                                        '</td>' +
                                        '<td><span class="syl">'+data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                                        '<td>' +
                                        '<span class="choose-type">' +
                                        '<span class="syl">'+data[i][3]+'</span>' +
                                        '<i class="icon iconfont icon-yousanjiao"></i>' +
                                        '</span>' +
                                        '<ul class="dn"><li>是</li><li>否</li></ul>' +
                                        '</td>' +
                                        '</tr>'
                                }
                                str+='</tbody>';
                                $('#changeType table').html(str);
                                $('#changeType').attr('type','database');
                            }
                        });
                        fieldDes();
                    }
                    $('#changeType').attr('blockId',blockId);
                }
            }
        }else if(modelId==56){
            for (var i=0;i<configObj.length; i++){
                if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
                    var dataParF=[];
                    for (var j=0;j<configObj[i].data.length;j++){
                        var configType = configObj[i].data[j].configType;
                        var configName=configObj[i].data[j].configName;
                        var url = configObj[i].data[j].configVal;
                        if(configType==3){
                            if (url==""){
                             break;
                            }else {
                                // 截取路径
                                var url1 ="/"+url.split("/")[url.split("/").length-2]+"/"+ url.split("/")[url.split("/").length-1];
                                console.log(url1);
                                dataParF.push(url1);
                            }

                        }
                    }
                    if(dataParF.length<1){
                        alert('请先选择路径');
                    }else {
                        $.ajax({
                            url:basePath+"/drag/flow/adddescription4csv.do",
                            type: 'get',
                            data: {inputPath: dataParF[0],tableHeader:false},
                            dataType: "json",
                            success: function (data) {
                                var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
                                str+='<tbody>';
                                for(var i=0;i<data.length;i++){
                                    str+='<tr>' +
                                        '<td><span class="syl">'+data[i][0]+'</span></td>' +
                                        '<td>' +
                                        '<span class="choose-type">' +
                                        '<span class="syl">'+data[i][1]+'</span>' +
                                        '<i class="icon iconfont icon-yousanjiao"></i>' +
                                        '</span>' +
                                        '<ul class="dn"><li>Integer</li><li>String</li><li>Boolean</li><li>Float</li><li>Double</li><li>BigDecimal</li><li>Date</li><li>Time</li><li>Timestamp</li></ul>' +
                                        '</td>' +
                                        '<td><span class="syl">'+data[i][2]+'</span><i id="changeDes" class="icon iconfont icon-miaoshu1"></i></td>' +
                                        '<td>' +
                                        '<span class="choose-type">' +
                                        '<span class="syl">'+data[i][3]+'</span>' +
                                        '<i class="icon iconfont icon-yousanjiao"></i>' +
                                        '</span>' +
                                        '<ul class="dn"><li>是</li><li>否</li></ul>' +
                                        '</td>' +
                                        '</tr>'
                                }
                                str+='</tbody>';
                                $('#changeType table').html(str);
                                $('#changeType').attr('type','csv');
                            }
                        });
                        fieldDes();
                    }
                    $('#changeType').attr('blockId',blockId);
                }
            }
        }

    }



    // for (var i=0;i<configObj.length; i++){
    //     if(modelId==configObj[i].id&&blockId==configObj[i].BlockId){
    //         var dataParF=[],dataParT=[];
    //         for (var j=0;j<configObj[i].data.length;j++){
    //             var configType = configObj[i].data[j].configType;
    //             var configName=configObj[i].data[j].configName;
    //             var url = configObj[i].data[j].configVal;
    //             if(configType==3){
    //                 // 截取路径
    //                 var url1 ="/"+url.split("/")[url.split("/").length-2]+"/"+ url.split("/")[url.split("/").length-1];
    //                 console.log(url1);
    //                 dataParF.push(url1);
    //             } else if(configType==6){
    //                 if(url==""){
    //                     alert('请先选择表名')
    //                 }else {
    //                     var splits = url.split("|");
    //                     var splits = splits[1];
    //                     dataParT.push(splits);
    //                 }
    //             }
    //         }
    //         if(modelId==1&&dataParF!=""){
    //             $.ajax({
    //                 url:basePath+"/drag/flow/adddescription4csv.do",
    //                 type: 'get',
    //                 data: {inputPath: dataParF[0],tableHeader:false},
    //                 dataType: "json",
    //                 success: function (data) {
    //                     var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
    //                     str+='<tbody>';
    //                     for(var i=0;i<data.length;i++){
    //                         str+='<tr>' +
    //                             '<td><span class="syl">'+data[i][0]+'</span></td>' +
    //                             '<td>' +
    //                             '<span class="choose-type">' +
    //                             '<span class="syl">'+data[i][1]+'</span>' +
    //                             '<i class="icon iconfont icon-yousanjiao"></i>' +
    //                             '</span>' +
    //                             '<ul class="dn"><li>float</li><li>string</li></ul>' +
    //                             '</td>' +
    //                             '<td><span class="syl">'+data[i][2]+'</span><i class="icon iconfont icon-miaoshu1"></i></td>' +
    //                             '<td>' +
    //                             '<span class="choose-type">' +
    //                             '<span class="syl">'+data[i][3]+'</span>' +
    //                             '<i class="icon iconfont icon-yousanjiao"></i>' +
    //                             '</span>' +
    //                             '<ul class="dn"><li>是</li><li>否</li></ul>' +
    //                             '</td>' +
    //                             '</tr>'
    //                     }
    //                     str+='</tbody>';
    //                     $('#changeType table').html(str);
    //                     $('#changeType').attr('type','csv');
    //                 }
    //             });
    //             fieldDes();
    //         }
    //         if(modelId==53&&dataParT!=""){
    //             $.ajax({
    //                 url:basePath+"/drag/flow/adddescription4database.do",
    //                 type: 'get',
    //                 data: {connectName: dataParT[0],tableName:dataParT[1]},
    //                 dataType: "json",
    //                 success: function (data) {
    //                     var str="<thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>标签列</th></tr></thead>";
    //                     str+='<tbody>';
    //                     for(var i=0;i<data.length;i++){
    //                         str+='<tr>' +
    //                             '<td><span class="syl">'+data[i][0]+'</span></td>' +
    //                             '<td>' +
    //                             '<span class="choose-type">' +
    //                             '<span class="syl">'+data[i][1]+'</span>' +
    //                             '<i class="icon iconfont icon-yousanjiao"></i>' +
    //                             '</span>' +
    //                             '<ul class="dn"><li>float</li><li>string</li></ul>' +
    //                             '</td>' +
    //                             '<td><span class="syl">'+data[i][2]+'</span><i class="icon iconfont icon-miaoshu1"></i></td>' +
    //                             '<td>' +
    //                             '<span class="choose-type">' +
    //                             '<span class="syl">'+data[i][3]+'</span>' +
    //                             '<i class="icon iconfont icon-yousanjiao"></i>' +
    //                             '</span>' +
    //                             '<ul class="dn"><li>是</li><li>否</li></ul>' +
    //                             '</td>' +
    //                             '</tr>'
    //                     }
    //                     str+='</tbody>';
    //                     $('#changeType table').html(str);
    //                     $('#changeType').attr('type','database');
    //                 }
    //             });
    //             fieldDes();
    //         }
    //         $('#changeType').attr('blockId',blockId);
    //     }
    // }

});
$('#changeType table').on('click','td .choose-type',function () {
    if($(this).next('ul').hasClass('dn')){
        $(this).next('ul').removeClass('dn')
    }else {
        $(this).next('ul').addClass('dn')
    }
});
$('#changeType table').on('click','td ul li',function () {
    $(this).parents('td').find('.choose-type span').html($(this).text());
    $(this).parents('ul').addClass('dn');
});
$('#changeType table').on('click','#changeDes',function (e) {
    e.stopPropagation();
    if($(this).hasClass('icon-miaoshu1')){
        var txt=$(this).parent().find('.syl').text();
        $(this).parent().find('.syl').html('<input id="changDesTxt" type="text" value="'+txt+'">');
        $(this).removeClass('icon-miaoshu1').addClass('icon-dui2')
    }else{
        var txt=$(this).parent().find('#changDesTxt').val();
        $(this).parent().find('.syl').html(txt);
        $(this).removeClass('icon-dui2').addClass('icon-miaoshu1');
    }

});

// 点击确定保存field
$('#saveField').on('click',function (blockId,type) {
    blockId=$('#changeType').attr('blockId');
    type=$('#changeType').attr('type');
    saveField(blockId,type);
    $('#changeType').modal('hide')
});
var field=[];
function saveField(blockId,type) {
    // 增加保存修改的字段描述
    var data=[];
    $('#changeType table tbody tr').each(function () {
        var json={};
        $(this).find('td span.syl').each(function (i) {
            json[i]=$(this).text();
        });
        data.push(json)
    });
    for(var i=0;i<field.length;i++){
        var index=i;
        if(field[index].blockId==blockId&&field[index].type==type){
            field.splice(field[index],1);
        }
    }
    field.push({
        blockId: blockId,
        type: type,
        data: data
    });

    console.log(field);
    // 增加保存修改的字段描述end
}

// end
// 动态描述字段end

$('#save-model').on('click',function () {
    $("#modelName").val("");
    $("#saveModelTrainFrame").modal('toggle');
    var blockId=$(this).parents('ul').attr('blockid');
    var blockName=null;
    for (var i=0;i<configObj.length; i++) {
        if (blockId == configObj[i].BlockId) {
            blockName=configObj[i].BlockName
        }
    }

    $("#saveModelTrainFrame").attr('blockName',blockName)
    $("#saveModelTrainFrame").attr('blockid',blockId)
})


//查看结果的三种情况

$('#lookDataResult').on('click',function () {
    $(".enlarge_model_btn").empty();
    $(".enlarge_model_btn").append("<i class='icon iconfont icon-quanping' value='0' ></i>");
    var modelId=$(this).parent().attr("data-val");
    //输出数据
    if(modelId==1||modelId==2||modelId==3||modelId==4||modelId==5||modelId==6||modelId==7||modelId==8||modelId==11||modelId==12||modelId==14||modelId==16||modelId==17||modelId==18||modelId==19||modelId==20||modelId==21||modelId==22||modelId==23||modelId==24||modelId==25||modelId==26||modelId==27||modelId==28||modelId==29||modelId==30||modelId==31||modelId==40||modelId==41||modelId==42||modelId==43||modelId==44||modelId==45||modelId==48||modelId==49||modelId==50||modelId==52||modelId==53||modelId==56||modelId==58){
        var blockId;
        for (var i=0;i<configObj.length; i++) {
            if (modelId == configObj[i].id) {
                blockId=configObj[i].BlockId
            }
        }
        getActionResult4Data(blockId);
        //输出数据和模型
    }else if(modelId==56||modelId==60||modelId==69||modelId==84){
        var blockId;
        for (var i=0;i<configObj.length; i++) {
            if (modelId == configObj[i].id) {
                blockId=configObj[i].BlockId
            }
        }
        getActionResult4DataAndModel(blockId);
    }else if(modelId==55){  //已训练的模型
        var blockId;
        for (var i=0;i<configObj.length; i++) {
            if (modelId == configObj[i].id) {
                blockId=configObj[i].BlockId
            }
        }
        var blockName=null;
        for (var i=0;i<configObj.length; i++) {
            if (blockId == configObj[i].BlockId) {
                blockName=configObj[i].BlockName
            }
        }
        getModelTrainedResult(blockId,blockName);
    } else if(modelId==57) {  //写入csv(V4)因为输出路径文件名可以自定义，重新分类
        var blockId;
        for (var i=0;i<configObj.length; i++) {
            if (modelId == configObj[i].id) {
                blockId=configObj[i].BlockId
            }
        }
        getActionResult4WriteCSV(blockId);
    } else {
        //输出模型
        var blockId;
        for (var i=0;i<configObj.length; i++) {
            if (modelId == configObj[i].id) {
                blockId=configObj[i].BlockId
            }
        }
        getActionResult4Model(blockId);
        // $("#lookDataResultFrame").modal("toggle");//查看结果
    }


})
$('#selectDataModel').on('click',function () {


    if($(this).parent().next().children('ul').hasClass('dn')){
        $(this).parent().next().children('ul').removeClass('dn');
    }else {
        $(this).parent().next().children('ul').addClass('dn');
    }

});
$('#lookDataAndModelResultFrame ').on('click','.filter ul li',function () {
    $(this).addClass('filter-active').siblings('li').removeClass('filter-active');
    var txt=$(this).text();
    $('#titleName').html(txt);
    if(txt=="查看数据"){
      $("#lookDataDiv").show();
        $("#lookModelDiv").hide();
    }else {
        $("#lookDataDiv").hide();
        $("#lookModelDiv").show();
    }
    $(this).parents('ul').addClass('dn')
})
/**
 * 查看日志切换
 */
$('#selectLogs').on('click',function () {


    if($(this).parent().next().children('ul').hasClass('dn')){
        $(this).parent().next().children('ul').removeClass('dn');
    }else {
        $(this).parent().next().children('ul').addClass('dn');
    }

});
$('#lookLogResultFrame ').on('click','.filter ul li',function () {
    $(this).addClass('filter-active').siblings('li').removeClass('filter-active');
    var num=$(this).attr('number');
    var txt=$(this).text();
    $('#logName').html(txt);
    console.log(logList);
    $("#actionlogs").empty();
    for(var i=0;i<logList.length;i++){
        if(i==num){
            if(i==logList.length-1){
                var html=""
                for(var j=0;j<logList[i].length;j++){
                    html+=logList[i][j]+"<br>"
                }
                $("#actionlogs").html(html);
            }else {

                $("#actionlogs").html(logList[i]);
            }

        }
    }

    $(this).parents('ul').addClass('dn')
})

/**
 * 右键查看日志
 */
var logList=[];
$('#lookLogResult').on('click',function () {
    $(".enlarge_model_btn").empty();
    $(".enlarge_model_btn").append("<i class='icon iconfont icon-quanping' value='0' ></i>");
    var blockId;
    var modelId=$(this).parent().attr("data-val");
    for (var i=0;i<configObj.length; i++) {
        if (modelId == configObj[i].id) {
            blockId=configObj[i].BlockId
        }
    }
    var flowId=$("#flowId").val();
    $.ajax({
        url:basePath+"/drag/flow/getactionlogs.do",
        type: 'GET',
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId},
        success: function (data) {

            logList.splice(0,logList.length);//清空数组
            $("#logsList").empty();
            var databaseJson = data.obj;
            for(var p in databaseJson){
                logList.push(databaseJson[p]);

            }

            for(var i=0;i<logList.length;i++){
                var num=i+1
                var logslist="<li number="+i+"><i class=\"glyphicon glyphicon-ok\"></i><span>查看日志"+num+"</span></li>"
                $("#logsList").append(logslist);



            }
            var h=logList.length*40+"px";

            $("#logsList").css("height",h);
            console.log(logList.length);
            console.log(databaseJson);

             $("#logName").html("查看日志1")
             $("#actionlogs").html(logList[0]);
            $("#lookLogResultFrame").modal("toggle");//查看日志
             }

    });

})
//初始化注释start
function createNoteWrite(event,note,left,top,id) {
    var noteContent=note.NoteContent;
    var bgColor=note.NoteBgColor;
    var align=note.NoteTextAlign;
    var alginHtmlStr='';
    if(align=="center"){
        alginHtmlStr='<i class="align1 iconfont icon-zuoduiqi1" style="color:#000000"></i>' +
            '<i class="align2 iconfont icon-juzhong1" style="color:#1bbc9b"></i>' +
            '<i class="align3 iconfont icon-youduiqi" style="color:#000000"></i>' ;
    }else if(align=='right'){
        alginHtmlStr='<i class="align1 iconfont icon-zuoduiqi1" style="color:#000000"></i>' +
            '<i class="align2 iconfont icon-juzhong1" style="color:#000000"></i>' +
            '<i class="align3 iconfont icon-youduiqi" style="color:#1bbc9b"></i>' ;
    }else {
        alginHtmlStr='<i class="align1 iconfont icon-zuoduiqi1" style="color:#1bbc9b"></i>' +
            '<i class="align2 iconfont icon-juzhong1" style="color:#000000"></i>' +
            '<i class="align3 iconfont icon-youduiqi" style="color:#000000"></i>' ;
    }

    var str='';
    str='<div class="noteDiv" id="'+id+'">' +
        '<div class="noteContent">'+
        '<div class="noteMenu">' +
        '<div class="noteMenuAlign">' +alginHtmlStr+
        '</div>' +
        '<div class="menuColorSelect">' +
        '<div class="menuColorDiv">' +
        '<div class="menuColorfather" style="background-color: '+bgColor+'"></div>' +
        '<div class="selectColor"><i class=" iconfont icon-shang2"></i></div>' +
        '</div>' +
        '<div class="menuColorList">' +
        '<div class="colorNum1" bgcolor="#f6dada"></div>' +
        '<div class="colorNum2" bgcolor="#f6dfc7"></div>' +
        '<div class="colorNum3" bgcolor="#fafacd"></div>' +
        '<div class="colorNum4" bgcolor="#dcf1c8"></div>' +
        '<div class="colorNum5"  bgcolor="#d5f5e5"></div>' +
        '<div class="colorNum6"  bgcolor="#c7eded"></div>' +
        '<div class="colorNum7"  bgcolor="#c5daee"></div>' +
        '<div class="colorNum8"  bgcolor="#e7daf3"></div>' +
        '</div>' +
        '</div>' +
        '<a class="menuDelete"><i class="iconfont icon-shanchu1"></i></a>' +
        '</div>' +
        '<textarea class="noteTextarea" style="background-color: '+bgColor+';text-align: '+align+'" >'+noteContent+'</textarea>' +
        '<div class=\"noteInput\" ></div>'+
        '</div>'+
        '</div>';
    $("#canvasBlock").append(str);
    $("#"+id).css("left", left).css("top", top);
    jsPlumb.draggable(id, { containment: false });
};
//初始化注释end
//添加注释
var m=0;
$('#addNote').on('click',function (event) {
    var x = event.clientX-$('#canvasBody').offset().left;
    var y = event.clientY-$('#canvasBody').offset().top;
    var lastId = $("div.noteDiv:last").attr("id");
    if(lastId){
        var lastIdNum = parseInt(lastId.substring(6))+1;
        m = lastIdNum;
        var id="noteId" + m
    }else{
        m++;
        var id = "noteId" + m;
    }
    var str='';
    str='<div class="noteDiv" id="'+id+'">' +
            '<div class="noteContent">'+
            '<div class="noteMenu">' +
                '<div class="noteMenuAlign">' +
                    '<i class="align1 iconfont icon-zuoduiqi1"></i>' +
                    '<i class="align2 iconfont icon-juzhong1"></i>' +
                    '<i class="align3 iconfont icon-youduiqi"></i>' +
                '</div>' +
                '<div class="menuColorSelect">' +
                    '<div class="menuColorDiv">' +
                        '<div class="menuColorfather"></div>' +
                        '<div class="selectColor"><i class=" iconfont icon-shang2"></i></div>' +
                    '</div>' +
                    '<div class="menuColorList">' +
                        '<div class="colorNum1" bgcolor="#f6dada"></div>' +
                        '<div class="colorNum2" bgcolor="#f6dfc7"></div>' +
                        '<div class="colorNum3" bgcolor="#fafacd"></div>' +
                        '<div class="colorNum4" bgcolor="#dcf1c8"></div>' +
                        '<div class="colorNum5"  bgcolor="#d5f5e5"></div>' +
                        '<div class="colorNum6"  bgcolor="#c7eded"></div>' +
                        '<div class="colorNum7"  bgcolor="#c5daee"></div>' +
                        '<div class="colorNum8"  bgcolor="#e7daf3"></div>' +
                    '</div>' +
                '</div>' +
                '<a class="menuDelete"><i class="iconfont icon-shanchu1"></i></a>' +
            '</div>' +
            '<textarea class="noteTextarea"></textarea>' +
        '<div class=\"noteInput\" ></div>'+
         '</div>'+
        '</div>';
    $("#canvasBlock").append(str);
    $("#"+id).css("left", x).css("top", y);
    jsPlumb.draggable(id, { containment: false });
});

// 添加注释end
//右键空白功能
$('.operatorTitle').on('contextmenu','.canvasBlock',function (e) {
    e.stopPropagation();
    var key = e.which;
    if(key == 3) {
        var x = e.clientX;
        var y = e.clientY;
        $("#right_menu").css({left:x,top:y,display:'block'});
        $('#copy').hide();
        $('#paste').show();
        $('#lookDataResult').hide();
        $('#lookLogResult').hide();
        $('#save-model').hide();
        $('#field-des').hide();
        $('#deleteLi').hide();

    }
    return false;
})
//空白取消右键功能
$('.canvasBlock').on('mousedown',function (e) {
    e.stopPropagation();
    var key = e.which;
    if(key == 1) {
        $("#right_menu").css('display','none');
    }
})
$(window).on("load",function(){
    $("body .excel_content").mCustomScrollbar({
        theme: "dark-thin",
        axis:"yx",
        setLeft: 0,
        scrollbarPosition: "outside",
        autoDraggerLength: false
    });
    $("body .excel_content_scrollbar").mCustomScrollbar({
        theme: "dark-thin",
        axis:"yx",
        setLeft: 0,
        scrollbarPosition: "outside",
        autoDraggerLength: false
    });
    // 提取列参数滚动条
    $("body .choice-column").mCustomScrollbar({
        theme: "dark-thin",
        axis:"y",
        setLeft: 0,
        scrollbarPosition: "inside"
    });

});
//数据查看的放大和还原
$("#lookDataResultFrame .enlarge_model_btn").on('click','i',function (e) {
    e.stopPropagation();
    var val=$(this).attr('value')
    if(val==0){
        $("#lookDataResultFrame  .enlarge_model_btn").empty();
        $("#lookDataResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-zuixiaohua' value='1' ></i>");
      $("#lookDataResultFrame").children().first().addClass('fangdaDiv');
      $("#excel_content1").css({width:'inherit'});
      //$("#lookDataResultFrame").children().first().children().eq(1).removeClass('fangdaDivWidth');
    }else {
        $("#lookDataResultFrame  .enlarge_model_btn").empty();
        $("#lookDataResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-quanping' value='0' ></i>");
        $("#lookDataResultFrame").children().first().removeClass('fangdaDiv');
        $("#excel_content1").css({width:'900px'});
    }
})
//模型查看的放大和还原
$("#lookModelResultFrame .enlarge_model_btn").on('click','i',function (e) {
    e.stopPropagation();
    var val=$(this).attr('value')
    if(val==0){
        $("#lookModelResultFrame  .enlarge_model_btn").empty();
        $("#lookModelResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-zuixiaohua' value='1' ></i>");
        $("#lookModelResultFrame").children().first().addClass('fangdaDiv');
        $("#excel_content2").css({width:'inherit'});
        //$("#lookDataResultFrame").children().first().children().eq(1).removeClass('fangdaDivWidth');
    }else {
        $("#lookModelResultFrame  .enlarge_model_btn").empty();
        $("#lookModelResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-quanping' value='0' ></i>");
        $("#lookModelResultFrame").children().first().removeClass('fangdaDiv');
        $("#excel_content2").css({width:'900px'});
    }
});
//查看数据和模型属性的放大和还原
$("#lookDataAndModelResultFrame .enlarge_model_btn").on('click','i',function (e) {
    e.stopPropagation();
    var val=$(this).attr('value')
    if(val==0){
        $("#lookDataAndModelResultFrame  .enlarge_model_btn").empty();
        $("#lookDataAndModelResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-zuixiaohua' value='1' ></i>");
        $("#lookDataAndModelResultFrame").children().first().addClass('fangdaDiv');
        $("#lookDataDiv").css({width:'inherit'});
        $("#lookModelDiv").css({width:'inherit'});
        //$("#lookDataResultFrame").children().first().children().eq(1).removeClass('fangdaDivWidth');
    }else {
        $("#lookDataAndModelResultFrame  .enlarge_model_btn").empty();
        $("#lookDataAndModelResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-quanping' value='0' ></i>");
        $("#lookDataAndModelResultFrame").children().first().removeClass('fangdaDiv');
        $("#lookDataDiv").css({width:'900px'});
        $("#lookModelDiv").css({width:'900px'});
    }
});
//模型查看的放大和还原
$("#lookLogResultFrame .enlarge_model_btn").on('click','i',function (e) {
    e.stopPropagation();
    var val=$(this).attr('value')
    if(val==0){
        $("#lookLogResultFrame  .enlarge_model_btn").empty();
        $("#lookLogResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-zuixiaohua' value='1' ></i>");
        $("#lookLogResultFrame").children().first().addClass('fangdaDiv');
        $("#excel_content_logs").css({width:'inherit'});
        //$("#lookDataResultFrame").children().first().children().eq(1).removeClass('fangdaDivWidth');
    }else {
        $("#lookLogResultFrame  .enlarge_model_btn").empty();
        $("#lookLogResultFrame  .enlarge_model_btn").append("<i class='icon iconfont icon-quanping' value='0' ></i>");
        $("#lookLogResultFrame").children().first().removeClass('fangdaDiv');
        $("#excel_content_logs").css({width:'900px'});
    }
})
//放大和还原end
/**
 * 右键查看算子运行结果，针对输出数据的算子
 * @param blockId
 */
function getActionResult4Data(blockId) {
    var flowId=$("#flowId").val();
    $.ajax({
        url:basePath+"/drag/flow/getactionresult4data.do",
        type: 'GET',
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId},
        success: function (data) {
            console.log(data);
            // alert(data[0][0])
            var th="";
            var tr="";
            var dataLength=100;
            var columns=1;
            if (data.length<100){
                dataLength=data.length;
            }
            for (var j=0;j<data[0].length;j++){
                 th+="<th>"+data[0][j]+"</th>";
            }
            for (var i=1;i<dataLength;i++){
                if (data[i].length>columns){
                    columns=data[i].length;
                }
                tr+="<tr>";
                for (var j=0;j<data[i].length;j++){
                    tr+="<td>"+data[i][j]+"</td>";
                }
                tr+="</tr>";
            }
            $("#resulthead").empty();
            $("#resulthead").html(th);
            $("#resultbody").empty();
            $("#resultbody").html(tr);
            $("#lookDataResultFrame").modal("toggle");//查看模型结果
        }

    });

}

/**
 * 右键查看算子运行结果，输出模型
 * @param blockId
 */
function getActionResult4Model(blockId) {
    var flowId=$("#flowId").val();
    $.ajax({
        url:basePath+"/drag/flow/getactionresult4model.do",
        type:"GET",
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId},
        success: function (data) {
            var modelAttr=data.resultmodel;
            var html="";
            for(var i=0;i<modelAttr.length;i++){
                html+=modelAttr[i]+"<br>";
            }
            $("#resultmodel").empty();
             $("#resultmodel").html(html);
            $("#lookModelResultFrame").modal("toggle");//查看模型结果
        }
    })
}
/**
 * 右键查看已训练的模型的运行结果
 * @param blockId
 */
function getModelTrainedResult(blockId,blockName) {
    var flowId=$("#flowId").val();
    $.ajax({
        url:basePath+"/drag/flow/getModelTrainedResult.do",
        type: 'GET',
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId,"modelTrainedName":blockName},
        success: function (data) {
            var table=data.resulttable;
            var model=data.resultmodel;
            if(table.size!=0 && typeof(model)!="undefined"){
                var th="";
                var tr="";
                var dataLength=100;
                var columns=1;
                if (table.length<100){
                    dataLength=table.length;
                }
                for (var j=0;j<table[0].length;j++){
                    th+="<th>"+table[0][j]+"</th>";
                }
                for (var i=1;i<dataLength;i++){
                    if (table[i].length>columns){
                        columns=table[i].length;
                    }
                    tr+="<tr>";
                    for (var j=0;j<table[i].length;j++){
                        tr+="<td>"+table[i][j]+"</td>";
                    }
                    tr+="</tr>";
                }

                var html="";
                for(var i=0;i<model.length;i++){
                    html+=model[i]+"<br>";
                }
                $("#resulthead1").empty();
                $("#resultbody1").empty();
                $("#resulthead1").html(th);
                $("#resultbody1").html(tr);
                $("#resultdata1").empty();
                $("#resultdata1").html(html)
                $("#lookDataAndModelResultFrame").modal("toggle");//查看
            }else{
                var html="";
                for(var i=0;i<model.length;i++){
                    html+=model[i]+"<br>";
                }
                $("#resultmodel").empty();
                $("#resultmodel").html(html);
                $("#lookModelResultFrame").modal("toggle");//查看模型结果
            }
        }
    })
}
/**
 * 右键查看算子运行结果（针对两种输出)
 * @param blockId
 */
function getActionResult4DataAndModel(blockId) {
    var flowId=$("#flowId").val();
    $.ajax({
        url:basePath+"/drag/flow/getactionresult4modelanddata.do",
        type: 'GET',
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId},
        success: function (data) {
            // $("#lookModelDiv").hide();
            var table=data.resulttable;
            var model=data.resultmodel;
            var th="";
            var tr="";
            var dataLength=100;
            var columns=1;
                if (table.length<100){
                    dataLength=table.length;
                }
                for (var j=0;j<table[0].length;j++){
                    th+="<th>"+table[0][j]+"</th>";
                }
                for (var i=1;i<dataLength;i++){
                    if (table[i].length>columns){
                        columns=table[i].length;
                    }
                    tr+="<tr>";
                    for (var j=0;j<table[i].length;j++){
                        tr+="<td>"+table[i][j]+"</td>";
                    }
                    tr+="</tr>";
                }

            var html="";
            for(var i=0;i<model.length;i++){
                html+=model[i]+"<br>";
            }
                $("#resulthead1").empty();
                $("#resultbody1").empty();
                $("#resulthead1").html(th);
                $("#resultbody1").html(tr);
                $("#resultdata1").empty();
                $("#resultdata1").html(html)
            $("#lookDataAndModelResultFrame").modal("toggle");//查看
        }
    })
}
/**
 * 右键保存算子为已训练的模型
 */
$("#savetrainedmodel").on("click",function () {
    var blockId=$("#saveModelTrainFrame").attr('blockid');
    var blockName=$("#saveModelTrainFrame").attr('blockName');
    var modelName= $("#modelName").val();
    var flowId=$("#flowId").val();
    $.ajax({
        url:basePath+"/drag/flow/settrainedmodel.do",
        type:"POST",
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId,"blockName":blockName,"modelName":modelName},
        success: function (data) {
            if(data.code==200){
                toastr.success(data.msg);
                $("#modelsize").html(parseInt($("#modelsize").html())+1)
            }else {
                toastr.error(data.msg);
            }
            $("#saveModelTrainFrame").modal('toggle');
        }
    })
})


/**
 * 保存之后异步加载已训练的模型算子列表
 */
$("#modeltrained").on("click",function (e) {
    $.ajax({
        url:basePath+"/drag/modeltrained/gettrainedmodel.do",
        type: 'GET',
        dataType: "json",
        success:function(json){
            $("#trainedul").empty();//清空数据区
            var modellist = "";
            var list = json;
                $.each(list, function (index, array) { //遍历json数据列
                    console.log(list[index]);
                    modellist+="<li class='mt-list-item border-yellow'>"
                        +"<div class='list-icon-container'>"
                        +"<i class='fa fa-tasks'></i>"
                        +"</div>"
                        +"<div class='list-item-content'>"
                        +"<h3 class='ui-draggable k_suanzi-width'>"+list[index].name+"</h3>"
                        +"<input type='hidden' id='"+list[index].nameRmNull+"' value='"+list[index].id+"' />"
                        +"<input type='hidden' class='leftNumber' value='"+list[index].leftNumber+"' />"
                        +"<input type='hidden' class='rightNumber' value='"+list[index].rightNumber+"' />"
                        +"<input type='hidden' class='modelInfo' value='"+list[index].flowDetails+"' />"
                        +"<input type='hidden' class='nameEnglish' value='"+list[index].nameEnglish+"' />"
                        +"<input type='hidden' id='modelTrainedId' value='"+list[index].modelTrainedId+"' />"
                        +"</div>"
                        +"</li>";
                });

            $("#trainedul").append(modellist);
        },
        complete:function () {
            $(".dragList").find("h3").draggable({
                drag: draggingModel,
                helper: draggingModel,
                scope: "ss"
            });
        },
        error:function(){
            alert("数据加载失败");
        }
    });

});



function createNode1(event, block,left,top){
    console.log(configObj);

    var lastId = $("div.box:last").attr("id");
    if (lastId) {
        var lastIdNum = parseInt(lastId.substring(10));
        i = lastIdNum;
    }
    var name = block.Name;
    var html = block.BlockContent;
    var borClass = block.BlockBorClass;
    var bgClass = block.BlockBgClass;
    console.log("bgClass:"+bgClass);
    var modelColor = $("." + bgClass).getBackgroundColor();
    console.log("modelColor2222222:"+modelColor);
    var fontClass = block.BlockFontClass;
    var fontIconClass = block.BlockFontIconClass;
    var id = block.BlockId;
    var modelList = $(".operatorBlock").find("h3.ui-draggable");
    for (var j = 0; j < modelList.length; j++) {
        if ($(modelList[j]).text() == html) {
            var egHtml = $(modelList[j]).siblings(".nameEnglish").val();
        }
    }
    var tem = egHtml.replace(/\s/g, "");
    var modelId = $("#" + tem).val();





    i++;
    id = "stateModel" + i;

    console.log(id);
    var tooltipStr = "<div class='tooltipInfo'>" + html +"</div>";
    // var str = '<div class="portlet ' + borClass + ' ' + bgClass + ' box" data-nodeName="'+ name +'" id="' + id + '" data-toggle="tooltip" title="' + tooltipStr + '">'
    var str = '<div class="portlet ' + borClass + ' ' + bgClass + ' box" data-nodeName="'+ name +'" id="' + id + '">'
        + '<div class="portlet-title">'
        + '<div class="tools">'
        + '<input type="hidden" name="modelId" value="'+modelId+'" />'
        + '<a class="icon-close" href="javascript:;" data-original-title="" title=""> </a>'
        + '</div></div>'
        + '<div class="portlet-body boxBody">'
        + '<div class="myicon text-center '+ fontClass+'"><i class="fa ' + fontIconClass + ' fa-2x"></i></div>'
        + '<h5 class="text-center"><span class="modelName" title="' + html + '">' + html + '</span></h5>'
        + '</div></div>';


    //基本连接线样式
    var connectorPaintStyle = {
        strokeWidth: 1,
        stroke: "#1bbc9b"
    };
    // 鼠标悬浮在连接线上的样式
    var connectorHoverStyle = {
        strokeWidth: 2,
        stroke: "#1bbc9b"
    };
    // 鼠标悬浮在连接点上的样式
    var endpointHoverStyle = {
        fill: modelColor,
        stroke: modelColor,
        radius: 7
    };
    var rectHoverStyle = {
        fill: modelColor,
        stroke: modelColor,
        width: 15,
        height: 15
    };
    var diaHoverStyle = {
        fill: modelColor,
        stroke: modelColor,
        width: 13,
        height: 13
    };
    var endpointStyle={
        fill: "#fff",
        stroke: modelColor,
        radius: 6
    };
    //hive样式
    var linkCircleIn = {
        endpoint: "Dot",  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: endpointHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            radius: 5,
            strokeWidth: 1
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: false,    //是否可以拖动（作为连线起点）
        scope: "dot",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: true,    //是否可以放置（连线终点）
        maxConnections: 1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    var linkCircleOut = {
        endpoint: "Dot",  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: endpointHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            radius: 5,
            strokeWidth: 1
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: true,    //是否可以拖动（作为连线起点）
        scope: "dot",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: false,    //是否可以放置（连线终点）
        maxConnections: -1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    //model样式
    var linkSquareIn = {
        endpoint: ["Rectangle", {width:10, height:10}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: rectHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: false,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: true,    //是否可以放置（连线终点）
        maxConnections: 1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    var linkSquareOut = {
        endpoint: ["Rectangle", {width:10, height:10}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: rectHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: true,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: false,    //是否可以放置（连线终点）
        maxConnections: -1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
   // view样式
    var linkDiamondIn = {
        endpoint: ["Rectangle", {cssClass:"rotateModel",width:13, height:13}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: diaHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: false,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: true,    //是否可以放置（连线终点）
        maxConnections: 1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    var linkDiamondOut = {
        endpoint: ["Rectangle", {cssClass:"rotateModel",width:13, height:13}],  //端点的形状
        endpointStyle:endpointStyle,
        endpointHoverStyle: diaHoverStyle,
        connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
        connectorHoverStyle: connectorHoverStyle,
        paintStyle: {
            stroke: modelColor,
            fill: "transparent",
            strokeWidth: 3
        },        //端点的颜色样式
        //anchor: "AutoDefault",
        isSource: true,    //是否可以拖动（作为连线起点）
        scope: "Rectangle",
        connector: ["Bezier", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
        isTarget: false,    //是否可以放置（连线终点）
        maxConnections: -1,    // 设置连接点最多可以连接几条线
        connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
    };
    function createInterface(el, d) {
        var rightInterface = $("#" + el).siblings(".rightNumber").val().split(",");
        var leftInterface = $("#" + el).siblings(".leftNumber").val().split(",");
        for (var i = 0; i < leftInterface.length; i++) {
            if (leftInterface == "") {

            }
            else {
                jsPlumb.addEndpoint(d, { anchors: [ i/3 + 0.5, 0, 0, -1 ] },eval(leftInterface[i]));
            }
        }
        for (var k = 0; k < rightInterface.length; k++) {
            if (rightInterface == "") {

            }
            else {
                jsPlumb.addEndpoint(d, { anchors: [ k/3 + 0.5, 1, 0, 1 ] }, eval(rightInterface[k]));
            }
        }
    }

    $("#canvasBlock").append(str);

    $("#" + id).css("left", left).css("top", top);
     createInterface(tem, id);
    jsPlumb.draggable(id, { containment: false });

    if (block) {
        configModel("",id, modelId, html, tem, bgClass);
        var modelInterface = $("#" + id).nextUntil(".box");
        $("#" + id).css("box-shadow", "2px 2px 19px #aaa");//选中效果
        $("#" + id).siblings(".box").css("box-shadow", "2px 2px 19px rgba(9,84,109,0.1)");//选中效果
        $("#" + id).css("z-index", "9");//选中层级提高
        modelInterface.css("z-index", "10");//选中层级提高
        $("#" + id).siblings(".box").css("z-index", "0");
        $(".jtk-endpoint").not(modelInterface).css("z-index", "1");
    }
}
function getActionResult4WriteCSV(blockId) {
    var flowId=$("#flowId").val();
    var fileName=$("#config244").val();
    $.ajax({
        url:basePath+"/drag/flow/getActionResult4WriteCSV.do",
        type: 'GET',
        dataType: "json",
        data:{"flowId":flowId,"blockId":blockId,"fileName":fileName},
        success: function (data) {
            console.log(data);
            // alert(data[0][0])
            var th="";
            var tr="";
            var dataLength=100;
            var columns=1;
            if (data.length<100){
                dataLength=data.length;
            }
            for (var j=0;j<data[0].length;j++){
                th+="<th>"+data[0][j]+"</th>";
            }
            for (var i=1;i<dataLength;i++){
                if (data[i].length>columns){
                    columns=data[i].length;
                }
                tr+="<tr>";
                for (var j=0;j<data[i].length;j++){
                    tr+="<td>"+data[i][j]+"</td>";
                }
                tr+="</tr>";
            }
            $("#resulthead").empty();
            $("#resulthead").html(th);
            $("#resultbody").empty();
            $("#resultbody").html(tr);
            $("#lookDataResultFrame").modal("toggle");//查看模型结果
        }

    });
}










